/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AutomationRequest;
import io.swagger.client.model.AutomationTestLog;
import io.swagger.client.model.AutomationTestLogResource;
import io.swagger.client.model.AutomationTestLogResourceResponse;
import io.swagger.client.model.ManualTestLogResource;
import io.swagger.client.model.QueueProcessingResponse;
import io.swagger.client.model.TestLogListResource;
import io.swagger.client.model.TestLogResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestLogApi
 */
@Ignore
public class TestLogApiTest {

    private final TestLogApi api = new TestLogApi();

    
    /**
     * Gets the latest Test Log of a Test Run
     *
     * To retrieve a Test Run&#39;s latest test result  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastRunLogTest() throws ApiException {
        Long projectId = null;
        Long testRunId = null;
        String expand = null;
        TestLogResource response = api.getLastRunLog(projectId, testRunId, expand);

        // TODO: test validations
    }
    
    /**
     * Gets a Test Log of a Test Run
     *
     * To retrieve a specific Test Log of a Test Run
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestLogTest() throws ApiException {
        Long projectId = null;
        Long id = null;
        Long testRunId = null;
        TestLogResource response = api.getTestLog(projectId, id, testRunId);

        // TODO: test validations
    }
    
    /**
     * Gets all Test Logs of a Test Run
     *
     * To retrieve all Test Logs of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestLogsListTest() throws ApiException {
        Long projectId = null;
        Long testRunId = null;
        Long pageSize = null;
        Long page = null;
        TestLogListResource response = api.getTestLogsList(projectId, testRunId, pageSize, page);

        // TODO: test validations
    }
    
    /**
     * Modify an Automation Test Log
     *
     * To modify test result of a &lt;em&gt;automation&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyAutomationLogTest() throws ApiException {
        Long projectId = null;
        AutomationTestLog body = null;
        Long testRunId = null;
        Long id = null;
        Boolean encodeNote = null;
        Object response = api.modifyAutomationLog(projectId, body, testRunId, id, encodeNote);

        // TODO: test validations
    }
    
    /**
     * Modify a Manual Test Log
     *
     * To modify test result of an &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyTestLogTest() throws ApiException {
        Long projectId = null;
        TestLogResource body = null;
        Long testRunId = null;
        Long id = null;
        TestLogResource response = api.modifyTestLog(projectId, body, testRunId, id);

        // TODO: test validations
    }
    
    /**
     * Submits an Automation Test Log
     *
     * To submit test result of an Automation Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitAutomationLogTest() throws ApiException {
        Long projectId = null;
        AutomationTestLogResource body = null;
        Long testRunId = null;
        String suitePerDay = null;
        String suiteDate = null;
        Boolean encodeNote = null;
        Boolean forceUpdateVersion = null;
        String agentId = null;
        String userId = null;
        AutomationTestLogResourceResponse response = api.submitAutomationLog(projectId, body, testRunId, suitePerDay, suiteDate, encodeNote, forceUpdateVersion, agentId, userId);

        // TODO: test validations
    }
    
    /**
     * Submits multiple test results
     *
     * To submit Automation Test Logs of multiple Test Runs  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.0.2+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitAutomationTestLogsTest() throws ApiException {
        Long projectId = null;
        AutomationRequest body = null;
        String type = null;
        Long testRunId = null;
        Boolean escapeXml = null;
        String userId = null;
        QueueProcessingResponse response = api.submitAutomationTestLogs(projectId, body, type, testRunId, escapeXml, userId);

        // TODO: test validations
    }
    
    /**
     * Submits multiple test results and specifies Test Design and Test Execution tree structures
     *
     * This is the extended version of this API &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs&lt;/strong&gt;. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  &lt;strong&gt;Important:&lt;/strong&gt; This API does not update names and locations of existing Test Cases and Test Runs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitAutomationTestLogsWithTreeStructureTest() throws ApiException {
        Long projectId = null;
        AutomationRequest body = null;
        String type = null;
        Boolean escapeXml = null;
        String userId = null;
        QueueProcessingResponse response = api.submitAutomationTestLogsWithTreeStructure(projectId, body, type, escapeXml, userId);

        // TODO: test validations
    }
    
    /**
     * Submits a Manual Test Log
     *
     * To submit test result of a &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitTestLogTest() throws ApiException {
        Long projectId = null;
        ManualTestLogResource body = null;
        Long testRunId = null;
        TestLogResource response = api.submitTestLog(projectId, body, testRunId);

        // TODO: test validations
    }
    
    /**
     * Gets a Batch Test Log Submission job&#39;s state
     *
     * To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;  or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include &lt;i&gt;IN_WAITING&lt;/i&gt;, &lt;i&gt;IN_PROCESSING&lt;/i&gt;, &lt;i&gt;FAILED&lt;/i&gt;, &lt;i&gt;PENDING&lt;/i&gt; and &lt;i&gt;SUCCESS&lt;/i&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackTest() throws ApiException {
        Long id = null;
        QueueProcessingResponse response = api.track(id);

        // TODO: test validations
    }
    
}

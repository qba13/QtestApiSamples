/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CommentResource;
import io.swagger.client.model.DefectResource;
import io.swagger.client.model.PagedResourceCommentResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefectApi
 */
@Ignore
public class DefectApiTest {

    private final DefectApi api = new DefectApi();

    
    /**
     * Adds a Comment to a Defect
     *
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCommentTest() throws ApiException {
        Long projectId = null;
        String idOrKey = null;
        CommentResource body = null;
        CommentResource response = api.addComment(projectId, idOrKey, body);

        // TODO: test validations
    }
    
    /**
     * Deletes a Comment of a Defect
     *
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        Object response = api.deleteComment(projectId, idOrKey, commentId);

        // TODO: test validations
    }
    
    /**
     * Gets all Comments of a Defect
     *
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        Long projectId = null;
        String idOrKey = null;
        Long page = null;
        Long pageSize = null;
        PagedResourceCommentResource response = api.getComments(projectId, idOrKey, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Gets a Defect
     *
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefectTest() throws ApiException {
        Long projectId = null;
        String defectId = null;
        DefectResource response = api.getDefect(projectId, defectId);

        // TODO: test validations
    }
    
    /**
     * Gets a Comment of a Defect
     *
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefectCommentByIdTest() throws ApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        CommentResource response = api.getDefectCommentById(projectId, idOrKey, commentId);

        // TODO: test validations
    }
    
    /**
     * Gets recently updated Defects
     *
     * To retrieve Defects which have been recently updated after a specified time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastChangedTest() throws ApiException {
        Long projectId = null;
        String startTime = null;
        String endTime = null;
        Integer size = null;
        Long page = null;
        List<DefectResource> response = api.getLastChanged(projectId, startTime, endTime, size, page);

        // TODO: test validations
    }
    
    /**
     * Submit a Defect
     *
     * To submit an internal Defect
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitDefectTest() throws ApiException {
        Long projectId = null;
        DefectResource body = null;
        DefectResource response = api.submitDefect(projectId, body);

        // TODO: test validations
    }
    
    /**
     * Updates a Comment of a Defect
     *
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        CommentResource body = null;
        CommentResource response = api.updateComment(projectId, idOrKey, commentId, body);

        // TODO: test validations
    }
    
    /**
     * Updates a Defect
     *
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDefectTest() throws ApiException {
        Long projectId = null;
        Long defectId = null;
        DefectResource body = null;
        DefectResource response = api.updateDefect(projectId, defectId, body);

        // TODO: test validations
    }
    
}

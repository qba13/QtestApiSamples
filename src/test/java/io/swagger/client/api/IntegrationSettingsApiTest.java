/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.IntegrationAutoFillMappingVM;
import io.swagger.client.model.IntegrationConnection;
import io.swagger.client.model.IntegrationConnectionVM;
import io.swagger.client.model.IntegrationFieldMapVM;
import io.swagger.client.model.IntegrationReleaseConfigurationVM;
import io.swagger.client.model.IntegrationReleaseMappingResponse;
import io.swagger.client.model.NewIntegrationConnectionInfo;
import io.swagger.client.model.QueueProcessingResponse;
import io.swagger.client.model.QueueProcessingResponseFetchDataVM;
import io.swagger.client.model.RequirementMapping;
import io.swagger.client.model.TokenSecretVerifierHolder;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationSettingsApi
 */
@Ignore
public class IntegrationSettingsApiTest {

    private final IntegrationSettingsApi api = new IntegrationSettingsApi();

    
    /**
     * Add a new Jira connection
     *
     * Add a new Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNewConnectionTest() throws ApiException {
        Long projectId = null;
        IntegrationConnection body = null;
        NewIntegrationConnectionInfo response = api.addNewConnection(projectId, body);

        // TODO: test validations
    }
    
    /**
     * Add a defect mapping to a Jira connection
     *
     * Add a defect mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNewDefectMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        IntegrationAutoFillMappingVM response = api.addNewDefectMapping(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Add a new Jira release mapping to a Jira connection
     *
     * Add a new Jira release mapping to a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNewReleaseMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        IntegrationReleaseMappingResponse response = api.addNewReleaseMapping(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Add a requirement mapping to a Jira connection
     *
     * Add a requirement mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNewRequirementMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        RequirementMapping response = api.addNewRequirementMapping(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Enable or disable populating Jira Unlinked Defects of a Jira connection
     *
     * Enable or disable populating Jira Unlinked Defects of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurePopulatingJiraUnlinkedDefectsTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String storeUnlinkedDefects = null;
        api.configurePopulatingJiraUnlinkedDefects(projectId, connectionId, storeUnlinkedDefects);

        // TODO: test validations
    }
    
    /**
     * Update a Release Mapping of a Jira connection
     *
     * To configure a Release Mapping of a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureReleaseMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        IntegrationReleaseConfigurationVM body = null;
        IntegrationReleaseMappingResponse response = api.configureReleaseMapping(projectId, connectionId, externalProjectId, externalIssueTypeId, body);

        // TODO: test validations
    }
    
    /**
     * Update a requirement mapping of a Jira connection
     *
     * To configure a requirement mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureRequirementMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        RequirementMapping body = null;
        RequirementMapping response = api.configureRequirementMapping(projectId, connectionId, externalProjectId, externalIssueTypeId, body);

        // TODO: test validations
    }
    
    /**
     * Delete a Jira connection
     *
     * Delete a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        api.deleteConnection(projectId, connectionId);

        // TODO: test validations
    }
    
    /**
     * OAuth Authorize URL
     *
     * OAuth Authorize URL (for Jira Server or DC only).  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizeURLTest() throws ApiException {
        Long projectId = null;
        String serverUrl = null;
        TokenSecretVerifierHolder response = api.getAuthorizeURL(projectId, serverUrl);

        // TODO: test validations
    }
    
    /**
     * Get all Jira connections of a project
     *
     * Get all Jira connections of a project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectionsTest() throws ApiException {
        Long projectId = null;
        IntegrationConnectionVM response = api.getConnections(projectId);

        // TODO: test validations
    }
    
    /**
     * Get Jira defect mappings of a Jira connection
     *
     * Get Jira defect mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefectMappingsTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        IntegrationAutoFillMappingVM response = api.getDefectMappings(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Get Jira release mappings of a Jira connection
     *
     * Get Jira release mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReleaseMappingsTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        List<IntegrationReleaseMappingResponse> response = api.getReleaseMappings(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Trigger retrieving latest field settings from a JIRA connection
     *
     * Trigger retrieving the latest Defects/Requirements field settings from Jira  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshFieldSettingsTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String artifact = null;
        Long mappingId = null;
        List<IntegrationFieldMapVM> response = api.refreshFieldSettings(projectId, connectionId, artifact, mappingId);

        // TODO: test validations
    }
    
    /**
     * Remove a Mapping of a Jira connection
     *
     * Remove a Mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String artifact = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        api.removeMapping(projectId, connectionId, artifact, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Get requirement mappings of a Jira connection
     *
     * Get requirement mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllRequirementMappingsOfConnectionTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        List<RequirementMapping> response = api.retrieveAllRequirementMappingsOfConnection(projectId, connectionId, externalProjectId, externalIssueTypeId);

        // TODO: test validations
    }
    
    /**
     * Enable or disable Release Integration feature of a Jira connection
     *
     * Enable or disable Release Integration feature  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleReleaseIntegrationTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String active = null;
        String autoFilterTestRun = null;
        String mergeDuplicatedFixVersions = null;
        api.toggleReleaseIntegration(projectId, connectionId, active, autoFilterTestRun, mergeDuplicatedFixVersions);

        // TODO: test validations
    }
    
    /**
     * Enable or disable a Requirement Integration feature of a Jira connection
     *
     * Enable or disable a Requirement Integration feature of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleRequirementIntegrationTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String active = null;
        api.toggleRequirementIntegration(projectId, connectionId, active);

        // TODO: test validations
    }
    
    /**
     * Trigger data retrieval from an integrated Jira system
     *
     * Trigger data retrieval from an integrated Jira system  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void triggerRetrievingDataForConnectionTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String artifact = null;
        QueueProcessingResponseFetchDataVM response = api.triggerRetrievingDataForConnection(projectId, connectionId, artifact);

        // TODO: test validations
    }
    
    /**
     * Trigger defect retrieval from an integrated Jira system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void triggerRetrievingDefectDataForConnectionTest() throws ApiException {
        Long projectId = null;
        List<String> body = null;
        QueueProcessingResponse response = api.triggerRetrievingDefectDataForConnection(projectId, body);

        // TODO: test validations
    }
    
    /**
     * Update a defect mapping of Jira connection
     *
     * Update a defect mapping of Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDefectMappingTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String externalProjectId = null;
        String externalIssueTypeId = null;
        IntegrationAutoFillMappingVM body = null;
        IntegrationAutoFillMappingVM response = api.updateDefectMapping(projectId, connectionId, externalProjectId, externalIssueTypeId, body);

        // TODO: test validations
    }
    
    /**
     * Activate or deactivate a Jira connection
     *
     * Activate or deactivate a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIntegrationConnectionStatusTest() throws ApiException {
        Long projectId = null;
        Long connectionId = null;
        String active = null;
        api.updateIntegrationConnectionStatus(projectId, connectionId, active);

        // TODO: test validations
    }
    
}

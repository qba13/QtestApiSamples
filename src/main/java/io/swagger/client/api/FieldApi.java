/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AllowedValueInputResource;
import io.swagger.client.model.AllowedValueResource;
import io.swagger.client.model.AllowedValueResponseResource;
import io.swagger.client.model.FieldInputResource;
import io.swagger.client.model.FieldResource;
import io.swagger.client.model.ResourceSupport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FieldApi {
    private ApiClient apiClient;

    public FieldApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FieldApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createCustomField */
    private com.squareup.okhttp.Call createCustomFieldCall(Long projectId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCustomFieldValidateBeforeCall(Long projectId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createCustomField(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCustomField(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling createCustomField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createCustomFieldCall(projectId, body, objectType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Custom Field of an Object Type
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource createCustomField(Long projectId, FieldResource body, String objectType) throws ApiException {
        ApiResponse<FieldResource> resp = createCustomFieldWithHttpInfo(projectId, body, objectType);
        return resp.getData();
    }

    /**
     * Creates a Custom Field of an Object Type
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> createCustomFieldWithHttpInfo(Long projectId, FieldResource body, String objectType) throws ApiException {
        com.squareup.okhttp.Call call = createCustomFieldValidateBeforeCall(projectId, body, objectType, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Custom Field of an Object Type (asynchronously)
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCustomFieldAsync(Long projectId, FieldResource body, String objectType, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCustomFieldValidateBeforeCall(projectId, body, objectType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createCustomSiteField */
    private com.squareup.okhttp.Call createCustomSiteFieldCall(String objectType, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCustomSiteFieldValidateBeforeCall(String objectType, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling createCustomSiteField(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCustomSiteField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createCustomSiteFieldCall(objectType, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Custom Site Field of an Object Type
     * To create a new Site Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body The Site field&#39;s properties and values  &lt;strong&gt;label (required)&lt;/strong&gt;: specify display name of the field  &lt;strong&gt;data_type (required)&lt;/strong&gt;: specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values array&lt;/em&gt;  Order is not applicable when creating new field (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource createCustomSiteField(String objectType, FieldInputResource body) throws ApiException {
        ApiResponse<FieldResource> resp = createCustomSiteFieldWithHttpInfo(objectType, body);
        return resp.getData();
    }

    /**
     * Creates a Custom Site Field of an Object Type
     * To create a new Site Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body The Site field&#39;s properties and values  &lt;strong&gt;label (required)&lt;/strong&gt;: specify display name of the field  &lt;strong&gt;data_type (required)&lt;/strong&gt;: specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values array&lt;/em&gt;  Order is not applicable when creating new field (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> createCustomSiteFieldWithHttpInfo(String objectType, FieldInputResource body) throws ApiException {
        com.squareup.okhttp.Call call = createCustomSiteFieldValidateBeforeCall(objectType, body, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Custom Site Field of an Object Type (asynchronously)
     * To create a new Site Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body The Site field&#39;s properties and values  &lt;strong&gt;label (required)&lt;/strong&gt;: specify display name of the field  &lt;strong&gt;data_type (required)&lt;/strong&gt;: specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values array&lt;/em&gt;  Order is not applicable when creating new field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCustomSiteFieldAsync(String objectType, FieldInputResource body, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCustomSiteFieldValidateBeforeCall(objectType, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createProjectFieldAllowedValues */
    private com.squareup.okhttp.Call createProjectFieldAllowedValuesCall(Long projectId, String objectType, Long fieldId, List<AllowedValueResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectFieldAllowedValuesValidateBeforeCall(Long projectId, String objectType, Long fieldId, List<AllowedValueResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling createProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling createProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProjectFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createProjectFieldAllowedValuesCall(projectId, objectType, fieldId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates allowed values of a Project Field
     * Creates maximum 100 allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @return AllowedValueResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllowedValueResponseResource createProjectFieldAllowedValues(Long projectId, String objectType, Long fieldId, List<AllowedValueResource> body) throws ApiException {
        ApiResponse<AllowedValueResponseResource> resp = createProjectFieldAllowedValuesWithHttpInfo(projectId, objectType, fieldId, body);
        return resp.getData();
    }

    /**
     * Creates allowed values of a Project Field
     * Creates maximum 100 allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @return ApiResponse&lt;AllowedValueResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllowedValueResponseResource> createProjectFieldAllowedValuesWithHttpInfo(Long projectId, String objectType, Long fieldId, List<AllowedValueResource> body) throws ApiException {
        com.squareup.okhttp.Call call = createProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, body, null, null);
        Type localVarReturnType = new TypeToken<AllowedValueResponseResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates allowed values of a Project Field (asynchronously)
     * Creates maximum 100 allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectFieldAllowedValuesAsync(Long projectId, String objectType, Long fieldId, List<AllowedValueResource> body, final ApiCallback<AllowedValueResponseResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllowedValueResponseResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createSiteFieldAllowedValues */
    private com.squareup.okhttp.Call createSiteFieldAllowedValuesCall(String objectType, Long fieldId, List<AllowedValueResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}/allowed-values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSiteFieldAllowedValuesValidateBeforeCall(String objectType, Long fieldId, List<AllowedValueResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling createSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling createSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSiteFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSiteFieldAllowedValuesCall(objectType, fieldId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates allowed values of a Site Field
     * Creates maximum 100 allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @return AllowedValueResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllowedValueResponseResource createSiteFieldAllowedValues(String objectType, Long fieldId, List<AllowedValueResource> body) throws ApiException {
        ApiResponse<AllowedValueResponseResource> resp = createSiteFieldAllowedValuesWithHttpInfo(objectType, fieldId, body);
        return resp.getData();
    }

    /**
     * Creates allowed values of a Site Field
     * Creates maximum 100 allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @return ApiResponse&lt;AllowedValueResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllowedValueResponseResource> createSiteFieldAllowedValuesWithHttpInfo(String objectType, Long fieldId, List<AllowedValueResource> body) throws ApiException {
        com.squareup.okhttp.Call call = createSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, body, null, null);
        Type localVarReturnType = new TypeToken<AllowedValueResponseResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates allowed values of a Site Field (asynchronously)
     * Creates maximum 100 allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSiteFieldAllowedValuesAsync(String objectType, Long fieldId, List<AllowedValueResource> body, final ApiCallback<AllowedValueResponseResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllowedValueResponseResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteCustomField */
    private com.squareup.okhttp.Call deleteCustomFieldCall(Long projectId, String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomFieldValidateBeforeCall(Long projectId, String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteCustomField(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling deleteCustomField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteCustomField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCustomFieldCall(projectId, objectType, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Custom Field of an Object Type
     * To delete a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteCustomField(Long projectId, String objectType, Long fieldId) throws ApiException {
        ApiResponse<Object> resp = deleteCustomFieldWithHttpInfo(projectId, objectType, fieldId);
        return resp.getData();
    }

    /**
     * Deletes a Custom Field of an Object Type
     * To delete a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCustomFieldWithHttpInfo(Long projectId, String objectType, Long fieldId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomFieldValidateBeforeCall(projectId, objectType, fieldId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Custom Field of an Object Type (asynchronously)
     * To delete a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomFieldAsync(Long projectId, String objectType, Long fieldId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomFieldValidateBeforeCall(projectId, objectType, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteCustomSiteField */
    private com.squareup.okhttp.Call deleteCustomSiteFieldCall(String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomSiteFieldValidateBeforeCall(String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling deleteCustomSiteField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteCustomSiteField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCustomSiteFieldCall(objectType, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Custom Site Field of an Object Type
     * To delete a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteCustomSiteField(String objectType, Long fieldId) throws ApiException {
        ApiResponse<Object> resp = deleteCustomSiteFieldWithHttpInfo(objectType, fieldId);
        return resp.getData();
    }

    /**
     * Deletes a Custom Site Field of an Object Type
     * To delete a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCustomSiteFieldWithHttpInfo(String objectType, Long fieldId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomSiteFieldValidateBeforeCall(objectType, fieldId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Custom Site Field of an Object Type (asynchronously)
     * To delete a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomSiteFieldAsync(String objectType, Long fieldId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomSiteFieldValidateBeforeCall(objectType, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteProjectFieldValue */
    private com.squareup.okhttp.Call deleteProjectFieldValueCall(Long projectId, String objectType, Long fieldId, Long value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values/{value}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
        .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectFieldValueValidateBeforeCall(Long projectId, String objectType, Long fieldId, Long value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectFieldValue(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling deleteProjectFieldValue(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteProjectFieldValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling deleteProjectFieldValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteProjectFieldValueCall(projectId, objectType, fieldId, value, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes an allowed value of a Project Field
     * To delete an allowed value of a Field (at project level) with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteProjectFieldValue(Long projectId, String objectType, Long fieldId, Long value) throws ApiException {
        ApiResponse<Object> resp = deleteProjectFieldValueWithHttpInfo(projectId, objectType, fieldId, value);
        return resp.getData();
    }

    /**
     * Deletes an allowed value of a Project Field
     * To delete an allowed value of a Field (at project level) with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteProjectFieldValueWithHttpInfo(Long projectId, String objectType, Long fieldId, Long value) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectFieldValueValidateBeforeCall(projectId, objectType, fieldId, value, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an allowed value of a Project Field (asynchronously)
     * To delete an allowed value of a Field (at project level) with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectFieldValueAsync(Long projectId, String objectType, Long fieldId, Long value, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectFieldValueValidateBeforeCall(projectId, objectType, fieldId, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSiteFieldValue */
    private com.squareup.okhttp.Call deleteSiteFieldValueCall(String objectType, Long fieldId, Long value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}/allowed-values/{value}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
        .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSiteFieldValueValidateBeforeCall(String objectType, Long fieldId, Long value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling deleteSiteFieldValue(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteSiteFieldValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling deleteSiteFieldValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSiteFieldValueCall(objectType, fieldId, value, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes an allowed value of a Site Field
     * To delete an allowed value of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteSiteFieldValue(String objectType, Long fieldId, Long value) throws ApiException {
        ApiResponse<Object> resp = deleteSiteFieldValueWithHttpInfo(objectType, fieldId, value);
        return resp.getData();
    }

    /**
     * Deletes an allowed value of a Site Field
     * To delete an allowed value of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteSiteFieldValueWithHttpInfo(String objectType, Long fieldId, Long value) throws ApiException {
        com.squareup.okhttp.Call call = deleteSiteFieldValueValidateBeforeCall(objectType, fieldId, value, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an allowed value of a Site Field (asynchronously)
     * To delete an allowed value of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSiteFieldValueAsync(String objectType, Long fieldId, Long value, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSiteFieldValueValidateBeforeCall(objectType, fieldId, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSiteFields */
    private com.squareup.okhttp.Call getAllSiteFieldsCall(String objectType, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSiteFieldsValidateBeforeCall(String objectType, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getAllSiteFields(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllSiteFieldsCall(objectType, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all site field of an object type
     * To get all fields (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return List&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldResource> getAllSiteFields(String objectType, Long page, Long pageSize) throws ApiException {
        ApiResponse<List<FieldResource>> resp = getAllSiteFieldsWithHttpInfo(objectType, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all site field of an object type
     * To get all fields (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;List&lt;FieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldResource>> getAllSiteFieldsWithHttpInfo(String objectType, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getAllSiteFieldsValidateBeforeCall(objectType, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all site field of an object type (asynchronously)
     * To get all fields (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSiteFieldsAsync(String objectType, Long page, Long pageSize, final ApiCallback<List<FieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSiteFieldsValidateBeforeCall(objectType, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCustomField */
    private com.squareup.okhttp.Call getCustomFieldCall(Long projectId, String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomFieldValidateBeforeCall(Long projectId, String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCustomField(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getCustomField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getCustomField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCustomFieldCall(projectId, objectType, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Custom Field of an Object Type
     * To get a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource getCustomField(Long projectId, String objectType, Long fieldId) throws ApiException {
        ApiResponse<FieldResource> resp = getCustomFieldWithHttpInfo(projectId, objectType, fieldId);
        return resp.getData();
    }

    /**
     * Gets a Custom Field of an Object Type
     * To get a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> getCustomFieldWithHttpInfo(Long projectId, String objectType, Long fieldId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomFieldValidateBeforeCall(projectId, objectType, fieldId, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Custom Field of an Object Type (asynchronously)
     * To get a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomFieldAsync(Long projectId, String objectType, Long fieldId, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomFieldValidateBeforeCall(projectId, objectType, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCustomSiteField */
    private com.squareup.okhttp.Call getCustomSiteFieldCall(String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomSiteFieldValidateBeforeCall(String objectType, Long fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getCustomSiteField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getCustomSiteField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCustomSiteFieldCall(objectType, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Custom Site Field of an Object Type
     * To get a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource getCustomSiteField(String objectType, Long fieldId) throws ApiException {
        ApiResponse<FieldResource> resp = getCustomSiteFieldWithHttpInfo(objectType, fieldId);
        return resp.getData();
    }

    /**
     * Gets a Custom Site Field of an Object Type
     * To get a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> getCustomSiteFieldWithHttpInfo(String objectType, Long fieldId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomSiteFieldValidateBeforeCall(objectType, fieldId, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Custom Site Field of an Object Type (asynchronously)
     * To get a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomSiteFieldAsync(String objectType, Long fieldId, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomSiteFieldValidateBeforeCall(objectType, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFields */
    private com.squareup.okhttp.Call getFieldsCall(Long projectId, String objectType, Boolean includeInactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (includeInactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeInactive", includeInactive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsValidateBeforeCall(Long projectId, String objectType, Boolean includeInactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFields(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getFields(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFieldsCall(projectId, objectType, includeInactive, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Fields of an Object Type
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @return List&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldResource> getFields(Long projectId, String objectType, Boolean includeInactive) throws ApiException {
        ApiResponse<List<FieldResource>> resp = getFieldsWithHttpInfo(projectId, objectType, includeInactive);
        return resp.getData();
    }

    /**
     * Gets all Fields of an Object Type
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @return ApiResponse&lt;List&lt;FieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldResource>> getFieldsWithHttpInfo(Long projectId, String objectType, Boolean includeInactive) throws ApiException {
        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(projectId, objectType, includeInactive, null, null);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Fields of an Object Type (asynchronously)
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldsAsync(Long projectId, String objectType, Boolean includeInactive, final ApiCallback<List<FieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(projectId, objectType, includeInactive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProjectFieldAllowedValues */
    private com.squareup.okhttp.Call getProjectFieldAllowedValuesCall(Long projectId, String objectType, Long fieldId, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectFieldAllowedValuesValidateBeforeCall(Long projectId, String objectType, Long fieldId, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getProjectFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProjectFieldAllowedValuesCall(projectId, objectType, fieldId, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all allowed values of a Project Field
     * To get all allowed values of a Project Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return List&lt;AllowedValueResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AllowedValueResource> getProjectFieldAllowedValues(Long projectId, String objectType, Long fieldId, Long page, Long pageSize) throws ApiException {
        ApiResponse<List<AllowedValueResource>> resp = getProjectFieldAllowedValuesWithHttpInfo(projectId, objectType, fieldId, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all allowed values of a Project Field
     * To get all allowed values of a Project Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;List&lt;AllowedValueResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AllowedValueResource>> getProjectFieldAllowedValuesWithHttpInfo(Long projectId, String objectType, Long fieldId, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AllowedValueResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all allowed values of a Project Field (asynchronously)
     * To get all allowed values of a Project Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectFieldAllowedValuesAsync(Long projectId, String objectType, Long fieldId, Long page, Long pageSize, final ApiCallback<List<AllowedValueResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AllowedValueResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSiteFieldAllowedValues */
    private com.squareup.okhttp.Call getSiteFieldAllowedValuesCall(String objectType, Long fieldId, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}/allowed-values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSiteFieldAllowedValuesValidateBeforeCall(String objectType, Long fieldId, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getSiteFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSiteFieldAllowedValuesCall(objectType, fieldId, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all allowed values of a Site Field
     * To get all allowed values of a Site Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return List&lt;AllowedValueResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AllowedValueResource> getSiteFieldAllowedValues(String objectType, Long fieldId, Long page, Long pageSize) throws ApiException {
        ApiResponse<List<AllowedValueResource>> resp = getSiteFieldAllowedValuesWithHttpInfo(objectType, fieldId, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all allowed values of a Site Field
     * To get all allowed values of a Site Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;List&lt;AllowedValueResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AllowedValueResource>> getSiteFieldAllowedValuesWithHttpInfo(String objectType, Long fieldId, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AllowedValueResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all allowed values of a Site Field (asynchronously)
     * To get all allowed values of a Site Field with Combo box/Multi selection combo box/Check box/User list data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSiteFieldAllowedValuesAsync(String objectType, Long fieldId, Long page, Long pageSize, final ApiCallback<List<AllowedValueResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AllowedValueResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCustomField */
    private com.squareup.okhttp.Call updateCustomFieldCall(Long projectId, String objectType, Long fieldId, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomFieldValidateBeforeCall(Long projectId, String objectType, Long fieldId, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCustomField(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling updateCustomField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateCustomField(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCustomFieldCall(projectId, objectType, fieldId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Custom Field of an Object Type
     * To update a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Project Field, refer [here](#/field/createProjectFieldAllowedValues)   - To update list allowed_values of Project Field, refer [here](#/field/updateProjectFieldAllowedValues) (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource updateCustomField(Long projectId, String objectType, Long fieldId, FieldInputResource body) throws ApiException {
        ApiResponse<FieldResource> resp = updateCustomFieldWithHttpInfo(projectId, objectType, fieldId, body);
        return resp.getData();
    }

    /**
     * Updates a Custom Field of an Object Type
     * To update a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Project Field, refer [here](#/field/createProjectFieldAllowedValues)   - To update list allowed_values of Project Field, refer [here](#/field/updateProjectFieldAllowedValues) (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> updateCustomFieldWithHttpInfo(Long projectId, String objectType, Long fieldId, FieldInputResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomFieldValidateBeforeCall(projectId, objectType, fieldId, body, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Custom Field of an Object Type (asynchronously)
     * To update a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Project Field, refer [here](#/field/createProjectFieldAllowedValues)   - To update list allowed_values of Project Field, refer [here](#/field/updateProjectFieldAllowedValues) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomFieldAsync(Long projectId, String objectType, Long fieldId, FieldInputResource body, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomFieldValidateBeforeCall(projectId, objectType, fieldId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCustomSiteField */
    private com.squareup.okhttp.Call updateCustomSiteFieldCall(String objectType, Long fieldId, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomSiteFieldValidateBeforeCall(String objectType, Long fieldId, FieldInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling updateCustomSiteField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateCustomSiteField(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomSiteField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCustomSiteFieldCall(objectType, fieldId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Custom Site Field of an Object Type
     * To update a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Site Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Site Field, refer [here](#/field/createSiteFieldAllowedValues)  - To update list allowed_values of Site Field, refer [here](#/field/updateSiteFieldAllowedValues) (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource updateCustomSiteField(String objectType, Long fieldId, FieldInputResource body) throws ApiException {
        ApiResponse<FieldResource> resp = updateCustomSiteFieldWithHttpInfo(objectType, fieldId, body);
        return resp.getData();
    }

    /**
     * Updates a Custom Site Field of an Object Type
     * To update a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Site Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Site Field, refer [here](#/field/createSiteFieldAllowedValues)  - To update list allowed_values of Site Field, refer [here](#/field/updateSiteFieldAllowedValues) (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> updateCustomSiteFieldWithHttpInfo(String objectType, Long fieldId, FieldInputResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomSiteFieldValidateBeforeCall(objectType, fieldId, body, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Custom Site Field of an Object Type (asynchronously)
     * To update a custom field (at site level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the custom field (required)
     * @param body The Site Field&#39;s updated properties &amp; values  Notes:  - Not allow to update &lt;strong&gt;data_type&lt;/strong&gt;  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \&quot;allowed_values\&quot;  - To add more allowed_values for Site Field, refer [here](#/field/createSiteFieldAllowedValues)  - To update list allowed_values of Site Field, refer [here](#/field/updateSiteFieldAllowedValues) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomSiteFieldAsync(String objectType, Long fieldId, FieldInputResource body, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomSiteFieldValidateBeforeCall(objectType, fieldId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateProjectFieldAllowedValues */
    private com.squareup.okhttp.Call updateProjectFieldAllowedValuesCall(Long projectId, String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values/{value}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
        .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProjectFieldAllowedValuesValidateBeforeCall(Long projectId, String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling updateProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateProjectFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateProjectFieldAllowedValuesCall(projectId, objectType, fieldId, value, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an allowed value of a Project Field
     * Update allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateProjectFieldAllowedValues(Long projectId, String objectType, Long fieldId, Long value, AllowedValueInputResource body) throws ApiException {
        ApiResponse<Object> resp = updateProjectFieldAllowedValuesWithHttpInfo(projectId, objectType, fieldId, value, body);
        return resp.getData();
    }

    /**
     * Updates an allowed value of a Project Field
     * Update allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateProjectFieldAllowedValuesWithHttpInfo(Long projectId, String objectType, Long fieldId, Long value, AllowedValueInputResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, value, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an allowed value of a Project Field (asynchronously)
     * Update allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProjectFieldAllowedValuesAsync(Long projectId, String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProjectFieldAllowedValuesValidateBeforeCall(projectId, objectType, fieldId, value, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateSiteFieldAllowedValues */
    private com.squareup.okhttp.Call updateSiteFieldAllowedValuesCall(String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/fields/{objectType}/{fieldId}/allowed-values/{value}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
        .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSiteFieldAllowedValuesValidateBeforeCall(String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling updateSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateSiteFieldAllowedValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSiteFieldAllowedValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSiteFieldAllowedValuesCall(objectType, fieldId, value, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an allowed value of a Site Field
     * Update allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @return ResourceSupport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceSupport updateSiteFieldAllowedValues(String objectType, Long fieldId, Long value, AllowedValueInputResource body) throws ApiException {
        ApiResponse<ResourceSupport> resp = updateSiteFieldAllowedValuesWithHttpInfo(objectType, fieldId, value, body);
        return resp.getData();
    }

    /**
     * Updates an allowed value of a Site Field
     * Update allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @return ApiResponse&lt;ResourceSupport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceSupport> updateSiteFieldAllowedValuesWithHttpInfo(String objectType, Long fieldId, Long value, AllowedValueInputResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, value, body, null, null);
        Type localVarReturnType = new TypeToken<ResourceSupport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an allowed value of a Site Field (asynchronously)
     * Update allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param fieldId ID of the field (required)
     * @param value ID (property \&quot;value\&quot;) of allowed value (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSiteFieldAllowedValuesAsync(String objectType, Long fieldId, Long value, AllowedValueInputResource body, final ApiCallback<ResourceSupport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSiteFieldAllowedValuesValidateBeforeCall(objectType, fieldId, value, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceSupport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FieldResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonApi {
    private ApiClient apiClient;

    public CommonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for editSystemField */
    private com.squareup.okhttp.Call editSystemFieldCall(Long projectId, Long fieldId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/system-fields/{fieldId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editSystemFieldValidateBeforeCall(Long projectId, Long fieldId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling editSystemField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling editSystemField(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling editSystemField(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling editSystemField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = editSystemFieldCall(projectId, fieldId, body, objectType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit System Field of an Object Type by the field
     * To edit System Field of an Object Type by the field
     * @param projectId ID of the project (required)
     * @param fieldId ID of the field. (required)
     * @param body Given resource to edit a system field. (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return FieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource editSystemField(Long projectId, Long fieldId, FieldResource body, String objectType) throws ApiException {
        ApiResponse<FieldResource> resp = editSystemFieldWithHttpInfo(projectId, fieldId, body, objectType);
        return resp.getData();
    }

    /**
     * Edit System Field of an Object Type by the field
     * To edit System Field of an Object Type by the field
     * @param projectId ID of the project (required)
     * @param fieldId ID of the field. (required)
     * @param body Given resource to edit a system field. (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> editSystemFieldWithHttpInfo(Long projectId, Long fieldId, FieldResource body, String objectType) throws ApiException {
        com.squareup.okhttp.Call call = editSystemFieldValidateBeforeCall(projectId, fieldId, body, objectType, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit System Field of an Object Type by the field (asynchronously)
     * To edit System Field of an Object Type by the field
     * @param projectId ID of the project (required)
     * @param fieldId ID of the field. (required)
     * @param body Given resource to edit a system field. (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editSystemFieldAsync(Long projectId, Long fieldId, FieldResource body, String objectType, final ApiCallback<FieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editSystemFieldValidateBeforeCall(projectId, fieldId, body, objectType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCustomFieldStatus */
    private com.squareup.okhttp.Call updateCustomFieldStatusCall(Long projectId, String objectType, List<FieldResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/custom-fields/active".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomFieldStatusValidateBeforeCall(Long projectId, String objectType, List<FieldResource> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCustomFieldStatus(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling updateCustomFieldStatus(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomFieldStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCustomFieldStatusCall(projectId, objectType, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update active or inactive custom fields of an Object Type
     * To update active or inactive custom fields of an Object Type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body Given resource to update custom fields. (required)
     * @return List&lt;FieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldResource> updateCustomFieldStatus(Long projectId, String objectType, List<FieldResource> body) throws ApiException {
        ApiResponse<List<FieldResource>> resp = updateCustomFieldStatusWithHttpInfo(projectId, objectType, body);
        return resp.getData();
    }

    /**
     * Update active or inactive custom fields of an Object Type
     * To update active or inactive custom fields of an Object Type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body Given resource to update custom fields. (required)
     * @return ApiResponse&lt;List&lt;FieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldResource>> updateCustomFieldStatusWithHttpInfo(Long projectId, String objectType, List<FieldResource> body) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomFieldStatusValidateBeforeCall(projectId, objectType, body, null, null);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update active or inactive custom fields of an Object Type (asynchronously)
     * To update active or inactive custom fields of an Object Type
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param body Given resource to update custom fields. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomFieldStatusAsync(Long projectId, String objectType, List<FieldResource> body, final ApiCallback<List<FieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomFieldStatusValidateBeforeCall(projectId, objectType, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

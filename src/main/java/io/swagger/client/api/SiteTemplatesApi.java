/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApplyTemplateQueryObject;
import io.swagger.client.model.ProjectResource;
import io.swagger.client.model.SiteTemplateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SiteTemplatesApi {
    private ApiClient apiClient;

    public SiteTemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SiteTemplatesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addProjects */
    private com.squareup.okhttp.Call addProjectsCall(Long templateId, ApplyTemplateQueryObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/site-templates/{templateId}/projects".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "templateId" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addProjectsValidateBeforeCall(Long templateId, ApplyTemplateQueryObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling addProjects(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addProjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addProjectsCall(templateId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Apply template to existing projects.
     * To apply template to existing projects.
     * @param templateId Template id which you want to apply to existing projects. (required)
     * @param body &lt;em&gt;project_ids:&lt;/em&gt;List of Project IDs  &lt;em&gt;create_new_site_field_values:&lt;/em&gt; Option to allow user to decide if they want to create new values to the site fields or keep the value private to the project when there are \&quot;unique values in project fields that do not exist in site fields\&quot; (default: true). (required)
     * @return List&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectResource> addProjects(Long templateId, ApplyTemplateQueryObject body) throws ApiException {
        ApiResponse<List<ProjectResource>> resp = addProjectsWithHttpInfo(templateId, body);
        return resp.getData();
    }

    /**
     * Apply template to existing projects.
     * To apply template to existing projects.
     * @param templateId Template id which you want to apply to existing projects. (required)
     * @param body &lt;em&gt;project_ids:&lt;/em&gt;List of Project IDs  &lt;em&gt;create_new_site_field_values:&lt;/em&gt; Option to allow user to decide if they want to create new values to the site fields or keep the value private to the project when there are \&quot;unique values in project fields that do not exist in site fields\&quot; (default: true). (required)
     * @return ApiResponse&lt;List&lt;ProjectResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectResource>> addProjectsWithHttpInfo(Long templateId, ApplyTemplateQueryObject body) throws ApiException {
        com.squareup.okhttp.Call call = addProjectsValidateBeforeCall(templateId, body, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply template to existing projects. (asynchronously)
     * To apply template to existing projects.
     * @param templateId Template id which you want to apply to existing projects. (required)
     * @param body &lt;em&gt;project_ids:&lt;/em&gt;List of Project IDs  &lt;em&gt;create_new_site_field_values:&lt;/em&gt; Option to allow user to decide if they want to create new values to the site fields or keep the value private to the project when there are \&quot;unique values in project fields that do not exist in site fields\&quot; (default: true). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProjectsAsync(Long templateId, ApplyTemplateQueryObject body, final ApiCallback<List<ProjectResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProjectsValidateBeforeCall(templateId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSiteTemplates */
    private com.squareup.okhttp.Call getAllSiteTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/site-templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSiteTemplatesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllSiteTemplatesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all site-templates
     * To retrieve all site-templates
     * @return List&lt;SiteTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SiteTemplateResponse> getAllSiteTemplates() throws ApiException {
        ApiResponse<List<SiteTemplateResponse>> resp = getAllSiteTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all site-templates
     * To retrieve all site-templates
     * @return ApiResponse&lt;List&lt;SiteTemplateResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SiteTemplateResponse>> getAllSiteTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllSiteTemplatesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SiteTemplateResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all site-templates (asynchronously)
     * To retrieve all site-templates
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSiteTemplatesAsync(final ApiCallback<List<SiteTemplateResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSiteTemplatesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SiteTemplateResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeProjectTemplates */
    private com.squareup.okhttp.Call removeProjectTemplatesCall(Long templateId, List<Long> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/site-templates/{templateId}/projects".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "templateId" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeProjectTemplatesValidateBeforeCall(Long templateId, List<Long> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling removeProjectTemplates(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeProjectTemplates(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeProjectTemplatesCall(templateId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove projects from a site template.
     * To remove projects from a site template.
     * @param templateId Template id which you want to detach it&#39;s projects. If &lt;strong&gt;0&lt;/strong&gt; (unassigned template id) is placing here, remove all site templates associated to provided project ids list. (required)
     * @param body Array of project ids that you want to detach from site template. (required)
     * @return List&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectResource> removeProjectTemplates(Long templateId, List<Long> body) throws ApiException {
        ApiResponse<List<ProjectResource>> resp = removeProjectTemplatesWithHttpInfo(templateId, body);
        return resp.getData();
    }

    /**
     * Remove projects from a site template.
     * To remove projects from a site template.
     * @param templateId Template id which you want to detach it&#39;s projects. If &lt;strong&gt;0&lt;/strong&gt; (unassigned template id) is placing here, remove all site templates associated to provided project ids list. (required)
     * @param body Array of project ids that you want to detach from site template. (required)
     * @return ApiResponse&lt;List&lt;ProjectResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectResource>> removeProjectTemplatesWithHttpInfo(Long templateId, List<Long> body) throws ApiException {
        com.squareup.okhttp.Call call = removeProjectTemplatesValidateBeforeCall(templateId, body, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove projects from a site template. (asynchronously)
     * To remove projects from a site template.
     * @param templateId Template id which you want to detach it&#39;s projects. If &lt;strong&gt;0&lt;/strong&gt; (unassigned template id) is placing here, remove all site templates associated to provided project ids list. (required)
     * @param body Array of project ids that you want to detach from site template. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeProjectTemplatesAsync(Long templateId, List<Long> body, final ApiCallback<List<ProjectResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeProjectTemplatesValidateBeforeCall(templateId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

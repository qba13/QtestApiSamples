/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AttachmentResource;
import io.swagger.client.model.Message;
import io.swagger.client.model.OutputStream;
import io.swagger.client.model.PagedResourceAttachmentResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentApi {
    private ApiClient apiClient;

    public AttachmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteByBlobHandleId */
    private com.squareup.okhttp.Call deleteByBlobHandleIdCall(Long projectId, Long blobHandleId, String objectType, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles/{blobHandleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "blobHandleId" + "\\}", apiClient.escapeString(blobHandleId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteByBlobHandleIdValidateBeforeCall(Long projectId, Long blobHandleId, String objectType, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteByBlobHandleId(Async)");
        }
        
        // verify the required parameter 'blobHandleId' is set
        if (blobHandleId == null) {
            throw new ApiException("Missing the required parameter 'blobHandleId' when calling deleteByBlobHandleId(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling deleteByBlobHandleId(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteByBlobHandleId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteByBlobHandleIdCall(projectId, blobHandleId, objectType, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes an Attachment from an Object
     * To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param blobHandleId ID of the Attachment (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message deleteByBlobHandleId(Long projectId, Long blobHandleId, String objectType, Long objectId) throws ApiException {
        ApiResponse<Message> resp = deleteByBlobHandleIdWithHttpInfo(projectId, blobHandleId, objectType, objectId);
        return resp.getData();
    }

    /**
     * Deletes an Attachment from an Object
     * To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param blobHandleId ID of the Attachment (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> deleteByBlobHandleIdWithHttpInfo(Long projectId, Long blobHandleId, String objectType, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteByBlobHandleIdValidateBeforeCall(projectId, blobHandleId, objectType, objectId, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an Attachment from an Object (asynchronously)
     * To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param blobHandleId ID of the Attachment (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteByBlobHandleIdAsync(Long projectId, Long blobHandleId, String objectType, Long objectId, final ApiCallback<Message> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteByBlobHandleIdValidateBeforeCall(projectId, blobHandleId, objectType, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAttachment */
    private com.squareup.okhttp.Call getAttachmentCall(Long projectId, Long attachmentId, String objectType, Long objectId, String forceDownload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments/{attachmentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (forceDownload != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "forceDownload", forceDownload));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAttachmentValidateBeforeCall(Long projectId, Long attachmentId, String objectType, Long objectId, String forceDownload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAttachment(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachment(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getAttachment(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getAttachment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAttachmentCall(projectId, attachmentId, objectType, objectId, forceDownload, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets an Attachment of an Object
     * To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param attachmentId ID of attachment (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step Test Step Log or Defect) (required)
     * @param forceDownload Input true to download attachments which have not been scanned for malware/virus successfully. By default, its value is false (optional, default to false)
     * @return OutputStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStream getAttachment(Long projectId, Long attachmentId, String objectType, Long objectId, String forceDownload) throws ApiException {
        ApiResponse<OutputStream> resp = getAttachmentWithHttpInfo(projectId, attachmentId, objectType, objectId, forceDownload);
        return resp.getData();
    }

    /**
     * Gets an Attachment of an Object
     * To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param attachmentId ID of attachment (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step Test Step Log or Defect) (required)
     * @param forceDownload Input true to download attachments which have not been scanned for malware/virus successfully. By default, its value is false (optional, default to false)
     * @return ApiResponse&lt;OutputStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStream> getAttachmentWithHttpInfo(Long projectId, Long attachmentId, String objectType, Long objectId, String forceDownload) throws ApiException {
        com.squareup.okhttp.Call call = getAttachmentValidateBeforeCall(projectId, attachmentId, objectType, objectId, forceDownload, null, null);
        Type localVarReturnType = new TypeToken<OutputStream>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an Attachment of an Object (asynchronously)
     * To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param attachmentId ID of attachment (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step Test Step Log or Defect) (required)
     * @param forceDownload Input true to download attachments which have not been scanned for malware/virus successfully. By default, its value is false (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttachmentAsync(Long projectId, Long attachmentId, String objectType, Long objectId, String forceDownload, final ApiCallback<OutputStream> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttachmentValidateBeforeCall(projectId, attachmentId, objectType, objectId, forceDownload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStream>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAttachmentsOf */
    private com.squareup.okhttp.Call getAttachmentsOfCall(Long projectId, String objectType, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAttachmentsOfValidateBeforeCall(Long projectId, String objectType, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAttachmentsOf(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getAttachmentsOf(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getAttachmentsOf(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAttachmentsOfCall(projectId, objectType, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Attachments of an Object
     * To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @return List&lt;AttachmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AttachmentResource> getAttachmentsOf(Long projectId, String objectType, Long objectId) throws ApiException {
        ApiResponse<List<AttachmentResource>> resp = getAttachmentsOfWithHttpInfo(projectId, objectType, objectId);
        return resp.getData();
    }

    /**
     * Gets all Attachments of an Object
     * To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @return ApiResponse&lt;List&lt;AttachmentResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AttachmentResource>> getAttachmentsOfWithHttpInfo(Long projectId, String objectType, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = getAttachmentsOfValidateBeforeCall(projectId, objectType, objectId, null, null);
        Type localVarReturnType = new TypeToken<List<AttachmentResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Attachments of an Object (asynchronously)
     * To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-step-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttachmentsOfAsync(Long projectId, String objectType, Long objectId, final ApiCallback<List<AttachmentResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttachmentsOfValidateBeforeCall(projectId, objectType, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AttachmentResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for search */
    private com.squareup.okhttp.Call searchCall(Long projectId, String type, List<Long> ids, Long author, String createdDate, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/attachments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));
        if (author != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "author", author));
        if (createdDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "createdDate", createdDate));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(Long projectId, String type, List<Long> ids, Long author, String createdDate, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling search(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling search(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchCall(projectId, type, ids, author, createdDate, pageSize, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches for Attachments
     * To query for attachments of &lt;em&gt;Releases&lt;/em&gt;, &lt;em&gt;Builds&lt;/em&gt;, &lt;em&gt;Requirements&lt;/em&gt;, &lt;em&gt;Test Cases&lt;/em&gt;, &lt;em&gt;Test Logs&lt;/em&gt;, &lt;em&gt;Test Steps&lt;/em&gt; or &lt;em&gt;Defects&lt;/em&gt;
     * @param projectId ID of the project (required)
     * @param type Its valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids List of object IDs (of the same type as specified in the parameter above), separated by commas (optional)
     * @param author ID of the user who created the attachment (optional)
     * @param createdDate Its format is: &lt;strong&gt;{operator} {createdDate in timestamp or UTC}&lt;/strong&gt;  The &lt;em&gt;operator&lt;/em&gt; can be one of the following values:  &lt;b&gt;lt&lt;/b&gt;: less than the given date  &lt;b&gt;gt&lt;/b&gt;: greater than given date  &lt;b&gt;eq&lt;/b&gt;: equal to the given date  &lt;b&gt;le&lt;/b&gt;: less than or equal to the given date  &lt;b&gt;ge&lt;/b&gt;: greater then or equal to the given date (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default, the first page is returned but you can specify any page number to retrieve attachments (optional, default to 1)
     * @return PagedResourceAttachmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceAttachmentResource search(Long projectId, String type, List<Long> ids, Long author, String createdDate, Long pageSize, Long page) throws ApiException {
        ApiResponse<PagedResourceAttachmentResource> resp = searchWithHttpInfo(projectId, type, ids, author, createdDate, pageSize, page);
        return resp.getData();
    }

    /**
     * Searches for Attachments
     * To query for attachments of &lt;em&gt;Releases&lt;/em&gt;, &lt;em&gt;Builds&lt;/em&gt;, &lt;em&gt;Requirements&lt;/em&gt;, &lt;em&gt;Test Cases&lt;/em&gt;, &lt;em&gt;Test Logs&lt;/em&gt;, &lt;em&gt;Test Steps&lt;/em&gt; or &lt;em&gt;Defects&lt;/em&gt;
     * @param projectId ID of the project (required)
     * @param type Its valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids List of object IDs (of the same type as specified in the parameter above), separated by commas (optional)
     * @param author ID of the user who created the attachment (optional)
     * @param createdDate Its format is: &lt;strong&gt;{operator} {createdDate in timestamp or UTC}&lt;/strong&gt;  The &lt;em&gt;operator&lt;/em&gt; can be one of the following values:  &lt;b&gt;lt&lt;/b&gt;: less than the given date  &lt;b&gt;gt&lt;/b&gt;: greater than given date  &lt;b&gt;eq&lt;/b&gt;: equal to the given date  &lt;b&gt;le&lt;/b&gt;: less than or equal to the given date  &lt;b&gt;ge&lt;/b&gt;: greater then or equal to the given date (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default, the first page is returned but you can specify any page number to retrieve attachments (optional, default to 1)
     * @return ApiResponse&lt;PagedResourceAttachmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceAttachmentResource> searchWithHttpInfo(Long projectId, String type, List<Long> ids, Long author, String createdDate, Long pageSize, Long page) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(projectId, type, ids, author, createdDate, pageSize, page, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceAttachmentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for Attachments (asynchronously)
     * To query for attachments of &lt;em&gt;Releases&lt;/em&gt;, &lt;em&gt;Builds&lt;/em&gt;, &lt;em&gt;Requirements&lt;/em&gt;, &lt;em&gt;Test Cases&lt;/em&gt;, &lt;em&gt;Test Logs&lt;/em&gt;, &lt;em&gt;Test Steps&lt;/em&gt; or &lt;em&gt;Defects&lt;/em&gt;
     * @param projectId ID of the project (required)
     * @param type Its valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids List of object IDs (of the same type as specified in the parameter above), separated by commas (optional)
     * @param author ID of the user who created the attachment (optional)
     * @param createdDate Its format is: &lt;strong&gt;{operator} {createdDate in timestamp or UTC}&lt;/strong&gt;  The &lt;em&gt;operator&lt;/em&gt; can be one of the following values:  &lt;b&gt;lt&lt;/b&gt;: less than the given date  &lt;b&gt;gt&lt;/b&gt;: greater than given date  &lt;b&gt;eq&lt;/b&gt;: equal to the given date  &lt;b&gt;le&lt;/b&gt;: less than or equal to the given date  &lt;b&gt;ge&lt;/b&gt;: greater then or equal to the given date (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default, the first page is returned but you can specify any page number to retrieve attachments (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(Long projectId, String type, List<Long> ids, Long author, String createdDate, Long pageSize, Long page, final ApiCallback<PagedResourceAttachmentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(projectId, type, ids, author, createdDate, pageSize, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceAttachmentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for upload */
    private com.squareup.okhttp.Call uploadCall(Long projectId, String objectType, Long objectId, String fileName, String contentType, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (fileName != null)
        localVarHeaderParams.put("File-Name", apiClient.parameterToString(fileName));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadValidateBeforeCall(Long projectId, String objectType, Long objectId, String fileName, String contentType, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling upload(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling upload(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling upload(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling upload(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling upload(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling upload(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadCall(projectId, objectType, objectId, fileName, contentType, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads an Attachment to an Object
     * To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @param fileName  (required)
     * @param contentType  (required)
     * @param body  (required)
     * @return AttachmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentResource upload(Long projectId, String objectType, Long objectId, String fileName, String contentType, byte[] body) throws ApiException {
        ApiResponse<AttachmentResource> resp = uploadWithHttpInfo(projectId, objectType, objectId, fileName, contentType, body);
        return resp.getData();
    }

    /**
     * Uploads an Attachment to an Object
     * To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @param fileName  (required)
     * @param contentType  (required)
     * @param body  (required)
     * @return ApiResponse&lt;AttachmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentResource> uploadWithHttpInfo(Long projectId, String objectType, Long objectId, String fileName, String contentType, byte[] body) throws ApiException {
        com.squareup.okhttp.Call call = uploadValidateBeforeCall(projectId, objectType, objectId, fileName, contentType, body, null, null);
        Type localVarReturnType = new TypeToken<AttachmentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads an Attachment to an Object (asynchronously)
     * To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect
     * @param projectId ID of the project (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+ (required)
     * @param objectId ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
     * @param fileName  (required)
     * @param contentType  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadAsync(Long projectId, String objectType, Long objectId, String fileName, String contentType, byte[] body, final ApiCallback<AttachmentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadValidateBeforeCall(projectId, objectType, objectId, fileName, contentType, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CommentResource;
import io.swagger.client.model.DefectResource;
import io.swagger.client.model.PagedResourceCommentResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefectApi {
    private ApiClient apiClient;

    public DefectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addComment */
    private com.squareup.okhttp.Call addCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling addComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a Comment to a Defect
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addComment(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = addCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Defect
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Defect (asynchronously)
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteComment */
    private com.squareup.okhttp.Call deleteCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Comment of a Defect
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteComment(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<Object> resp = deleteCommentWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Deletes a Comment of a Defect
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Comment of a Defect (asynchronously)
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getComments */
    private com.squareup.okhttp.Call getCommentsCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsValidateBeforeCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCommentsCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Comments of a Defect
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return PagedResourceCommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getComments(Long projectId, String idOrKey, Long page, Long pageSize) throws ApiException {
        ApiResponse<PagedResourceCommentResource> resp = getCommentsWithHttpInfo(projectId, idOrKey, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Defect
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getCommentsWithHttpInfo(Long projectId, String idOrKey, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Defect (asynchronously)
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsAsync(Long projectId, String idOrKey, Long page, Long pageSize, final ApiCallback<PagedResourceCommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDefect */
    private com.squareup.okhttp.Call getDefectCall(Long projectId, String defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{defectId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "defectId" + "\\}", apiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectValidateBeforeCall(Long projectId, String defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDefect(Async)");
        }
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new ApiException("Missing the required parameter 'defectId' when calling getDefect(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDefectCall(projectId, defectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Defect
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @return DefectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource getDefect(Long projectId, String defectId) throws ApiException {
        ApiResponse<DefectResource> resp = getDefectWithHttpInfo(projectId, defectId);
        return resp.getData();
    }

    /**
     * Gets a Defect
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> getDefectWithHttpInfo(Long projectId, String defectId) throws ApiException {
        com.squareup.okhttp.Call call = getDefectValidateBeforeCall(projectId, defectId, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Defect (asynchronously)
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectAsync(Long projectId, String defectId, final ApiCallback<DefectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectValidateBeforeCall(projectId, defectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDefectCommentById */
    private com.squareup.okhttp.Call getDefectCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDefectCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getDefectCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getDefectCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDefectCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Comment of a Defect
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getDefectCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<CommentResource> resp = getDefectCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment of a Defect
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getDefectCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = getDefectCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment of a Defect (asynchronously)
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getLastChanged */
    private com.squareup.okhttp.Call getLastChangedCall(Long projectId, String startTime, String endTime, Integer size, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/last-change".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastChangedValidateBeforeCall(Long projectId, String startTime, String endTime, Integer size, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getLastChanged(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getLastChanged(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLastChangedCall(projectId, startTime, endTime, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets recently updated Defects
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return List&lt;DefectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectResource> getLastChanged(Long projectId, String startTime, String endTime, Integer size, Long page) throws ApiException {
        ApiResponse<List<DefectResource>> resp = getLastChangedWithHttpInfo(projectId, startTime, endTime, size, page);
        return resp.getData();
    }

    /**
     * Gets recently updated Defects
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DefectResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectResource>> getLastChangedWithHttpInfo(Long projectId, String startTime, String endTime, Integer size, Long page) throws ApiException {
        com.squareup.okhttp.Call call = getLastChangedValidateBeforeCall(projectId, startTime, endTime, size, page, null, null);
        Type localVarReturnType = new TypeToken<List<DefectResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets recently updated Defects (asynchronously)
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastChangedAsync(Long projectId, String startTime, String endTime, Integer size, Long page, final ApiCallback<List<DefectResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastChangedValidateBeforeCall(projectId, startTime, endTime, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for submitDefect */
    private com.squareup.okhttp.Call submitDefectCall(Long projectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitDefectValidateBeforeCall(Long projectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling submitDefect(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitDefect(Async)");
        }
        
        
        com.squareup.okhttp.Call call = submitDefectCall(projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit a Defect
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @return DefectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource submitDefect(Long projectId, DefectResource body) throws ApiException {
        ApiResponse<DefectResource> resp = submitDefectWithHttpInfo(projectId, body);
        return resp.getData();
    }

    /**
     * Submit a Defect
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> submitDefectWithHttpInfo(Long projectId, DefectResource body) throws ApiException {
        com.squareup.okhttp.Call call = submitDefectValidateBeforeCall(projectId, body, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a Defect (asynchronously)
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitDefectAsync(Long projectId, DefectResource body, final ApiCallback<DefectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitDefectValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateComment */
    private com.squareup.okhttp.Call updateCommentCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCommentCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Comment of a Defect
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateComment(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = updateCommentWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Defect
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Defect (asynchronously)
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDefect */
    private com.squareup.okhttp.Call updateDefectCall(Long projectId, Long defectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{defectId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "defectId" + "\\}", apiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDefectValidateBeforeCall(Long projectId, Long defectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateDefect(Async)");
        }
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new ApiException("Missing the required parameter 'defectId' when calling updateDefect(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDefect(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateDefectCall(projectId, defectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Defect
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @return DefectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource updateDefect(Long projectId, Long defectId, DefectResource body) throws ApiException {
        ApiResponse<DefectResource> resp = updateDefectWithHttpInfo(projectId, defectId, body);
        return resp.getData();
    }

    /**
     * Updates a Defect
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> updateDefectWithHttpInfo(Long projectId, Long defectId, DefectResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateDefectValidateBeforeCall(projectId, defectId, body, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Defect (asynchronously)
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDefectAsync(Long projectId, Long defectId, DefectResource body, final ApiCallback<DefectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDefectValidateBeforeCall(projectId, defectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

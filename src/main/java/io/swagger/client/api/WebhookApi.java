/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.WebhookRequest;
import io.swagger.client.model.WebhookVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
    private ApiClient apiClient;

    public WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createWebhook */
    private com.squareup.okhttp.Call createWebhookCall(WebhookRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWebhookValidateBeforeCall(WebhookRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createWebhook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createWebhookCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Registers a webhook
     * To register a webhook
     * @param body &lt;em&gt;name (required):&lt;/em&gt; name of the webhook  &lt;em&gt;URL (required):&lt;/em&gt; where the callback should be sent  &lt;em&gt;secretkey (required):&lt;/em&gt; secretkey is used to ensure that POST requests sent to the URL are from qTest  &lt;em&gt;events (required):&lt;/em&gt; list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @return WebhookVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookVM createWebhook(WebhookRequest body) throws ApiException {
        ApiResponse<WebhookVM> resp = createWebhookWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Registers a webhook
     * To register a webhook
     * @param body &lt;em&gt;name (required):&lt;/em&gt; name of the webhook  &lt;em&gt;URL (required):&lt;/em&gt; where the callback should be sent  &lt;em&gt;secretkey (required):&lt;/em&gt; secretkey is used to ensure that POST requests sent to the URL are from qTest  &lt;em&gt;events (required):&lt;/em&gt; list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @return ApiResponse&lt;WebhookVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookVM> createWebhookWithHttpInfo(WebhookRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createWebhookValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Registers a webhook (asynchronously)
     * To register a webhook
     * @param body &lt;em&gt;name (required):&lt;/em&gt; name of the webhook  &lt;em&gt;URL (required):&lt;/em&gt; where the callback should be sent  &lt;em&gt;secretkey (required):&lt;/em&gt; secretkey is used to ensure that POST requests sent to the URL are from qTest  &lt;em&gt;events (required):&lt;/em&gt; list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWebhookAsync(WebhookRequest body, final ApiCallback<WebhookVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWebhookValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteWebhookById */
    private com.squareup.okhttp.Call deleteWebhookByIdCall(String webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks/{webhookId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookId" + "\\}", apiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebhookByIdValidateBeforeCall(String webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhookById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWebhookByIdCall(webhookId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a webhook
     * To delete a registered webhook
     * @param webhookId ID of the webhook (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteWebhookById(String webhookId) throws ApiException {
        ApiResponse<Object> resp = deleteWebhookByIdWithHttpInfo(webhookId);
        return resp.getData();
    }

    /**
     * Deletes a webhook
     * To delete a registered webhook
     * @param webhookId ID of the webhook (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteWebhookByIdWithHttpInfo(String webhookId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookByIdValidateBeforeCall(webhookId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a webhook (asynchronously)
     * To delete a registered webhook
     * @param webhookId ID of the webhook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookByIdAsync(String webhookId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookByIdValidateBeforeCall(webhookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllEventNames */
    private com.squareup.okhttp.Call getAllEventNamesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks/events".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllEventNamesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllEventNamesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of webhook event names
     * To retrieve list of all available event names for webhook registering
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getAllEventNames() throws ApiException {
        ApiResponse<List<String>> resp = getAllEventNamesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of webhook event names
     * To retrieve list of all available event names for webhook registering
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getAllEventNamesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllEventNamesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of webhook event names (asynchronously)
     * To retrieve list of all available event names for webhook registering
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllEventNamesAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllEventNamesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllWebhooks */
    private com.squareup.okhttp.Call getAllWebhooksCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllWebhooksValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllWebhooksCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets list of all registered webhooks
     * To retrieve list of all registered webhooks
     * @return List&lt;WebhookVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WebhookVM> getAllWebhooks() throws ApiException {
        ApiResponse<List<WebhookVM>> resp = getAllWebhooksWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets list of all registered webhooks
     * To retrieve list of all registered webhooks
     * @return ApiResponse&lt;List&lt;WebhookVM&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WebhookVM>> getAllWebhooksWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllWebhooksValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<WebhookVM>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets list of all registered webhooks (asynchronously)
     * To retrieve list of all registered webhooks
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllWebhooksAsync(final ApiCallback<List<WebhookVM>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllWebhooksValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WebhookVM>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWebhookById */
    private com.squareup.okhttp.Call getWebhookByIdCall(String webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks/{webhookId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookId" + "\\}", apiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookByIdValidateBeforeCall(String webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhookById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWebhookByIdCall(webhookId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a webhook
     * To retrieve details of a registered webhook
     * @param webhookId ID of the webhook (required)
     * @return WebhookVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookVM getWebhookById(String webhookId) throws ApiException {
        ApiResponse<WebhookVM> resp = getWebhookByIdWithHttpInfo(webhookId);
        return resp.getData();
    }

    /**
     * Gets a webhook
     * To retrieve details of a registered webhook
     * @param webhookId ID of the webhook (required)
     * @return ApiResponse&lt;WebhookVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookVM> getWebhookByIdWithHttpInfo(String webhookId) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookByIdValidateBeforeCall(webhookId, null, null);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a webhook (asynchronously)
     * To retrieve details of a registered webhook
     * @param webhookId ID of the webhook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookByIdAsync(String webhookId, final ApiCallback<WebhookVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookByIdValidateBeforeCall(webhookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateWebhook */
    private com.squareup.okhttp.Call updateWebhookCall(String webhookId, WebhookRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/webhooks/{webhookId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookId" + "\\}", apiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWebhookValidateBeforeCall(String webhookId, WebhookRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhook(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWebhook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateWebhookCall(webhookId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a webhook
     * 
     * @param webhookId ID of the webhook (required)
     * @param body Update webhook&#39;s information  &lt;em&gt;name:&lt;/em&gt; New name of the webhook  &lt;em&gt;URL:&lt;/em&gt; New URL of the webhook  &lt;em&gt;secretkey:&lt;/em&gt; New secret key of the webhook  &lt;em&gt;events (required):&lt;/em&gt; New list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @return WebhookVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookVM updateWebhook(String webhookId, WebhookRequest body) throws ApiException {
        ApiResponse<WebhookVM> resp = updateWebhookWithHttpInfo(webhookId, body);
        return resp.getData();
    }

    /**
     * Updates a webhook
     * 
     * @param webhookId ID of the webhook (required)
     * @param body Update webhook&#39;s information  &lt;em&gt;name:&lt;/em&gt; New name of the webhook  &lt;em&gt;URL:&lt;/em&gt; New URL of the webhook  &lt;em&gt;secretkey:&lt;/em&gt; New secret key of the webhook  &lt;em&gt;events (required):&lt;/em&gt; New list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @return ApiResponse&lt;WebhookVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookVM> updateWebhookWithHttpInfo(String webhookId, WebhookRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(webhookId, body, null, null);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a webhook (asynchronously)
     * 
     * @param webhookId ID of the webhook (required)
     * @param body Update webhook&#39;s information  &lt;em&gt;name:&lt;/em&gt; New name of the webhook  &lt;em&gt;URL:&lt;/em&gt; New URL of the webhook  &lt;em&gt;secretkey:&lt;/em&gt; New secret key of the webhook  &lt;em&gt;events (required):&lt;/em&gt; New list event(s) to register. Its valid values include  - testcase_created  - testcase_updated  - testcase_deleted  - testcase_approved  - testrun_created  - testrun_updated  - testrun_deleted  - testlog_submitted  - testlog_modified  - project_created  - project_updated  - defect_submitted  - defect_modified (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWebhookAsync(String webhookId, WebhookRequest body, final ApiCallback<WebhookVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(webhookId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

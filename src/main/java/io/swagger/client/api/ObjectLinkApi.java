/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.LinkedArtifactContainer;
import io.swagger.client.model.LinkedDefectContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectLinkApi {
    private ApiClient apiClient;

    public ObjectLinkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectLinkApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for find */
    private com.squareup.okhttp.Call findCall(Long projectId, String type, List<Long> ids, List<String> pids, Boolean trofSharedprojects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/linked-artifacts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));
        if (pids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "pids", pids));
        if (trofSharedprojects != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "TRofSharedprojects", trofSharedprojects));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findValidateBeforeCall(Long projectId, String type, List<Long> ids, List<String> pids, Boolean trofSharedprojects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling find(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling find(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findCall(projectId, type, ids, pids, trofSharedprojects, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets associated objects of given objects
     * To retrieve associated objects of given objects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param type Valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;,&lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids IDs of objects whose links you want to retrieve (optional)
     * @param pids In case of &lt;em&gt;type&#x3D;defects&lt;/em&gt;, you can specify a list of external defect id in this parameters.  It cannot be used for other types (optional)
     * @param trofSharedprojects  (optional)
     * @return List&lt;LinkedArtifactContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LinkedArtifactContainer> find(Long projectId, String type, List<Long> ids, List<String> pids, Boolean trofSharedprojects) throws ApiException {
        ApiResponse<List<LinkedArtifactContainer>> resp = findWithHttpInfo(projectId, type, ids, pids, trofSharedprojects);
        return resp.getData();
    }

    /**
     * Gets associated objects of given objects
     * To retrieve associated objects of given objects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param type Valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;,&lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids IDs of objects whose links you want to retrieve (optional)
     * @param pids In case of &lt;em&gt;type&#x3D;defects&lt;/em&gt;, you can specify a list of external defect id in this parameters.  It cannot be used for other types (optional)
     * @param trofSharedprojects  (optional)
     * @return ApiResponse&lt;List&lt;LinkedArtifactContainer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LinkedArtifactContainer>> findWithHttpInfo(Long projectId, String type, List<Long> ids, List<String> pids, Boolean trofSharedprojects) throws ApiException {
        com.squareup.okhttp.Call call = findValidateBeforeCall(projectId, type, ids, pids, trofSharedprojects, null, null);
        Type localVarReturnType = new TypeToken<List<LinkedArtifactContainer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets associated objects of given objects (asynchronously)
     * To retrieve associated objects of given objects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param type Valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;,&lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt; (required)
     * @param ids IDs of objects whose links you want to retrieve (optional)
     * @param pids In case of &lt;em&gt;type&#x3D;defects&lt;/em&gt;, you can specify a list of external defect id in this parameters.  It cannot be used for other types (optional)
     * @param trofSharedprojects  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findAsync(Long projectId, String type, List<Long> ids, List<String> pids, Boolean trofSharedprojects, final ApiCallback<List<LinkedArtifactContainer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findValidateBeforeCall(projectId, type, ids, pids, trofSharedprojects, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LinkedArtifactContainer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for linkArtifacts */
    private com.squareup.okhttp.Call linkArtifactsCall(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/link".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linkArtifactsValidateBeforeCall(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling linkArtifacts(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling linkArtifacts(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling linkArtifacts(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling linkArtifacts(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling linkArtifacts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = linkArtifactsCall(projectId, objectType, type, body, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates links between objects
     * To add associated objects to another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being added to the source object  Notes:  When creating link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @return List&lt;LinkedArtifactContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LinkedArtifactContainer> linkArtifacts(Long projectId, String objectType, String type, List<Long> body, Long objectId) throws ApiException {
        ApiResponse<List<LinkedArtifactContainer>> resp = linkArtifactsWithHttpInfo(projectId, objectType, type, body, objectId);
        return resp.getData();
    }

    /**
     * Creates links between objects
     * To add associated objects to another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being added to the source object  Notes:  When creating link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @return ApiResponse&lt;List&lt;LinkedArtifactContainer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LinkedArtifactContainer>> linkArtifactsWithHttpInfo(Long projectId, String objectType, String type, List<Long> body, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = linkArtifactsValidateBeforeCall(projectId, objectType, type, body, objectId, null, null);
        Type localVarReturnType = new TypeToken<List<LinkedArtifactContainer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates links between objects (asynchronously)
     * To add associated objects to another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being added to the source object  Notes:  When creating link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linkArtifactsAsync(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ApiCallback<List<LinkedArtifactContainer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linkArtifactsValidateBeforeCall(projectId, objectType, type, body, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LinkedArtifactContainer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for linkArtifactsByPid */
    private com.squareup.okhttp.Call linkArtifactsByPidCall(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/{linkType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "linkType" + "\\}", apiClient.escapeString(linkType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linkArtifactsByPidValidateBeforeCall(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling linkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling linkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'linkType' is set
        if (linkType == null) {
            throw new ApiException("Missing the required parameter 'linkType' when calling linkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling linkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling linkArtifactsByPid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = linkArtifactsByPidCall(projectId, objectType, linkType, body, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates links between objects by pids
     * To add associated objects to another object by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @return List&lt;LinkedDefectContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LinkedDefectContainer> linkArtifactsByPid(Long projectId, String objectType, String linkType, List<String> body, Long objectId) throws ApiException {
        ApiResponse<List<LinkedDefectContainer>> resp = linkArtifactsByPidWithHttpInfo(projectId, objectType, linkType, body, objectId);
        return resp.getData();
    }

    /**
     * Creates links between objects by pids
     * To add associated objects to another object by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @return ApiResponse&lt;List&lt;LinkedDefectContainer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LinkedDefectContainer>> linkArtifactsByPidWithHttpInfo(Long projectId, String objectType, String linkType, List<String> body, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = linkArtifactsByPidValidateBeforeCall(projectId, objectType, linkType, body, objectId, null, null);
        Type localVarReturnType = new TypeToken<List<LinkedDefectContainer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates links between objects by pids (asynchronously)
     * To add associated objects to another object by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linkArtifactsByPidAsync(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ApiCallback<List<LinkedDefectContainer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linkArtifactsByPidValidateBeforeCall(projectId, objectType, linkType, body, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LinkedDefectContainer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unlinkArtifacts */
    private com.squareup.okhttp.Call unlinkArtifactsCall(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/link".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlinkArtifactsValidateBeforeCall(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling unlinkArtifacts(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling unlinkArtifacts(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling unlinkArtifacts(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unlinkArtifacts(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling unlinkArtifacts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unlinkArtifactsCall(projectId, objectType, type, body, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes links between objects
     * To remove associated objects from another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being removed from the source object  Notes:  When removing link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object unlinkArtifacts(Long projectId, String objectType, String type, List<Long> body, Long objectId) throws ApiException {
        ApiResponse<Object> resp = unlinkArtifactsWithHttpInfo(projectId, objectType, type, body, objectId);
        return resp.getData();
    }

    /**
     * Removes links between objects
     * To remove associated objects from another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being removed from the source object  Notes:  When removing link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> unlinkArtifactsWithHttpInfo(Long projectId, String objectType, String type, List<Long> body, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = unlinkArtifactsValidateBeforeCall(projectId, objectType, type, body, objectId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes links between objects (asynchronously)
     * To remove associated objects from another object
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param type The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object IDs which are being removed from the source object  Notes:  When removing link between Test Case and Requirement, please make sure that:  - The Test Case is not routed for VERA approval  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
     * @param objectId ID of the source object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlinkArtifactsAsync(Long projectId, String objectType, String type, List<Long> body, Long objectId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlinkArtifactsValidateBeforeCall(projectId, objectType, type, body, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unlinkArtifactsByPid */
    private com.squareup.okhttp.Call unlinkArtifactsByPidCall(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/{objectType}/{objectId}/{linkType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "objectType" + "\\}", apiClient.escapeString(objectType.toString()))
        .replaceAll("\\{" + "linkType" + "\\}", apiClient.escapeString(linkType.toString()))
        .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlinkArtifactsByPidValidateBeforeCall(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling unlinkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling unlinkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'linkType' is set
        if (linkType == null) {
            throw new ApiException("Missing the required parameter 'linkType' when calling unlinkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unlinkArtifactsByPid(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling unlinkArtifactsByPid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unlinkArtifactsByPidCall(projectId, objectType, linkType, body, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes links between objects by pids
     * To removes links between objects by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> unlinkArtifactsByPid(Long projectId, String objectType, String linkType, List<String> body, Long objectId) throws ApiException {
        ApiResponse<List<String>> resp = unlinkArtifactsByPidWithHttpInfo(projectId, objectType, linkType, body, objectId);
        return resp.getData();
    }

    /**
     * Removes links between objects by pids
     * To removes links between objects by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> unlinkArtifactsByPidWithHttpInfo(Long projectId, String objectType, String linkType, List<String> body, Long objectId) throws ApiException {
        com.squareup.okhttp.Call call = unlinkArtifactsByPidValidateBeforeCall(projectId, objectType, linkType, body, objectId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes links between objects by pids (asynchronously)
     * To removes links between objects by pids
     * @param projectId ID of the project (required)
     * @param objectType The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
     * @param linkType The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
     * @param body A JSONArray of associated object PIDs which are being added to the source object (required)
     * @param objectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlinkArtifactsByPidAsync(Long projectId, String objectType, String linkType, List<String> body, Long objectId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlinkArtifactsByPidValidateBeforeCall(projectId, objectType, linkType, body, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthSystemResponse;
import io.swagger.client.model.LDAPUsersResponse;
import io.swagger.client.model.LdapUserResource;
import io.swagger.client.model.ResponseWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthSystemsApi {
    private ApiClient apiClient;

    public AuthSystemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthSystemsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getAll */
    private com.squareup.okhttp.Call getAllCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/auth-systems".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get multiple Authentication Systems
     * To get multiple Authentication Systems
     * @return AuthSystemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthSystemResponse getAll() throws ApiException {
        ApiResponse<AuthSystemResponse> resp = getAllWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get multiple Authentication Systems
     * To get multiple Authentication Systems
     * @return ApiResponse&lt;AuthSystemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthSystemResponse> getAllWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthSystemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get multiple Authentication Systems (asynchronously)
     * To get multiple Authentication Systems
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAsync(final ApiCallback<AuthSystemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthSystemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllLdapUsers */
    private com.squareup.okhttp.Call getAllLdapUsersCall(Long ldapAuthConfigId, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/auth-systems/ldap/{ldapAuthConfigId}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "ldapAuthConfigId" + "\\}", apiClient.escapeString(ldapAuthConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllLdapUsersValidateBeforeCall(Long ldapAuthConfigId, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapAuthConfigId' is set
        if (ldapAuthConfigId == null) {
            throw new ApiException("Missing the required parameter 'ldapAuthConfigId' when calling getAllLdapUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllLdapUsersCall(ldapAuthConfigId, pageSize, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all LDAP users of an authentication LDAP config
     * Get all LDAP users of an authentication LDAP config with pagination supported. Users are mapped with qTest users won&#39;t be returned.  If &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data.
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param pageSize Number of of item count per page. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 100)
     * @param page Page number that you want to get the result. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 1)
     * @return LDAPUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LDAPUsersResponse getAllLdapUsers(Long ldapAuthConfigId, Long pageSize, Long page) throws ApiException {
        ApiResponse<LDAPUsersResponse> resp = getAllLdapUsersWithHttpInfo(ldapAuthConfigId, pageSize, page);
        return resp.getData();
    }

    /**
     * Get all LDAP users of an authentication LDAP config
     * Get all LDAP users of an authentication LDAP config with pagination supported. Users are mapped with qTest users won&#39;t be returned.  If &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data.
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param pageSize Number of of item count per page. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 100)
     * @param page Page number that you want to get the result. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 1)
     * @return ApiResponse&lt;LDAPUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LDAPUsersResponse> getAllLdapUsersWithHttpInfo(Long ldapAuthConfigId, Long pageSize, Long page) throws ApiException {
        com.squareup.okhttp.Call call = getAllLdapUsersValidateBeforeCall(ldapAuthConfigId, pageSize, page, null, null);
        Type localVarReturnType = new TypeToken<LDAPUsersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all LDAP users of an authentication LDAP config (asynchronously)
     * Get all LDAP users of an authentication LDAP config with pagination supported. Users are mapped with qTest users won&#39;t be returned.  If &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data.
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param pageSize Number of of item count per page. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 100)
     * @param page Page number that you want to get the result. If this &lt;strong&gt;pageSize&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt; is omitted, all users will be returned without any default paging data. (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllLdapUsersAsync(Long ldapAuthConfigId, Long pageSize, Long page, final ApiCallback<LDAPUsersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllLdapUsersValidateBeforeCall(ldapAuthConfigId, pageSize, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LDAPUsersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importLDapUsers */
    private com.squareup.okhttp.Call importLDapUsersCall(Long ldapAuthConfigId, List<LdapUserResource> body, Boolean mergeUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/auth-systems/ldap/{ldapAuthConfigId}/import".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "ldapAuthConfigId" + "\\}", apiClient.escapeString(ldapAuthConfigId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mergeUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mergeUser", mergeUser));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importLDapUsersValidateBeforeCall(Long ldapAuthConfigId, List<LdapUserResource> body, Boolean mergeUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapAuthConfigId' is set
        if (ldapAuthConfigId == null) {
            throw new ApiException("Missing the required parameter 'ldapAuthConfigId' when calling importLDapUsers(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importLDapUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importLDapUsersCall(ldapAuthConfigId, body, mergeUser, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Associate Manager users with LDAP users
     * Associate Manager users with LDAP users authentication LDAP config
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param body  (required)
     * @param mergeUser Option to merge LDAP account to qTest account if qTest email already exists in qTest (support true/false value, &lt;strong&gt;default &#x3D; false&lt;/strong&gt;) (optional)
     * @return ResponseWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseWrapper importLDapUsers(Long ldapAuthConfigId, List<LdapUserResource> body, Boolean mergeUser) throws ApiException {
        ApiResponse<ResponseWrapper> resp = importLDapUsersWithHttpInfo(ldapAuthConfigId, body, mergeUser);
        return resp.getData();
    }

    /**
     * Associate Manager users with LDAP users
     * Associate Manager users with LDAP users authentication LDAP config
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param body  (required)
     * @param mergeUser Option to merge LDAP account to qTest account if qTest email already exists in qTest (support true/false value, &lt;strong&gt;default &#x3D; false&lt;/strong&gt;) (optional)
     * @return ApiResponse&lt;ResponseWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseWrapper> importLDapUsersWithHttpInfo(Long ldapAuthConfigId, List<LdapUserResource> body, Boolean mergeUser) throws ApiException {
        com.squareup.okhttp.Call call = importLDapUsersValidateBeforeCall(ldapAuthConfigId, body, mergeUser, null, null);
        Type localVarReturnType = new TypeToken<ResponseWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Associate Manager users with LDAP users (asynchronously)
     * Associate Manager users with LDAP users authentication LDAP config
     * @param ldapAuthConfigId Id of the Authentication config (required)
     * @param body  (required)
     * @param mergeUser Option to merge LDAP account to qTest account if qTest email already exists in qTest (support true/false value, &lt;strong&gt;default &#x3D; false&lt;/strong&gt;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importLDapUsersAsync(Long ldapAuthConfigId, List<LdapUserResource> body, Boolean mergeUser, final ApiCallback<ResponseWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importLDapUsersValidateBeforeCall(ldapAuthConfigId, body, mergeUser, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

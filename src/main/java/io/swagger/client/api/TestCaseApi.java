/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CommentResource;
import io.swagger.client.model.PagedResourceCommentResource;
import io.swagger.client.model.TestCaseWithCustomFieldResource;
import io.swagger.client.model.TestStepResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestCaseApi {
    private ApiClient apiClient;

    public TestCaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestCaseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addTestCaseComment */
    private com.squareup.okhttp.Call addTestCaseCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestCaseCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestCaseComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling addTestCaseComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestCaseComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestCaseCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a Comment to a Test Case
     * To add a Comment to a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param body The comment&#39;s properties and its content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addTestCaseComment(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = addTestCaseCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Test Case
     * To add a Comment to a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param body The comment&#39;s properties and its content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addTestCaseCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = addTestCaseCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Test Case (asynchronously)
     * To add a Comment to a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param body The comment&#39;s properties and its content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestCaseCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestCaseCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTestStep */
    private com.squareup.okhttp.Call addTestStepCall(Long projectId, Long testCaseId, TestStepResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestStepValidateBeforeCall(Long projectId, Long testCaseId, TestStepResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestStep(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling addTestStep(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestStep(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestStepCall(projectId, testCaseId, body, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Test Step
     * To add a Test Step to a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param body Given resource to add a test step.  Support create test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestStepResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestStepResource addTestStep(Long projectId, Long testCaseId, TestStepResource body, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestStepResource> resp = addTestStepWithHttpInfo(projectId, testCaseId, body, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Creates a Test Step
     * To add a Test Step to a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param body Given resource to add a test step.  Support create test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestStepResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestStepResource> addTestStepWithHttpInfo(Long projectId, Long testCaseId, TestStepResource body, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = addTestStepValidateBeforeCall(projectId, testCaseId, body, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Test Step (asynchronously)
     * To add a Test Step to a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param body Given resource to add a test step.  Support create test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestStepAsync(Long projectId, Long testCaseId, TestStepResource body, Boolean showParamIdentifier, final ApiCallback<TestStepResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestStepValidateBeforeCall(projectId, testCaseId, body, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for approveTestCase */
    private com.squareup.okhttp.Call approveTestCaseCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/approve".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTestCaseValidateBeforeCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling approveTestCase(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling approveTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = approveTestCaseCall(projectId, testCaseId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approves a Test Case
     * To approve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource approveTestCase(Long projectId, Long testCaseId) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = approveTestCaseWithHttpInfo(projectId, testCaseId);
        return resp.getData();
    }

    /**
     * Approves a Test Case
     * To approve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> approveTestCaseWithHttpInfo(Long projectId, Long testCaseId) throws ApiException {
        com.squareup.okhttp.Call call = approveTestCaseValidateBeforeCall(projectId, testCaseId, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approves a Test Case (asynchronously)
     * To approve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTestCaseAsync(Long projectId, Long testCaseId, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTestCaseValidateBeforeCall(projectId, testCaseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for approveTestCaseByVera */
    private com.squareup.okhttp.Call approveTestCaseByVeraCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/vera/approve".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTestCaseByVeraValidateBeforeCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling approveTestCaseByVera(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling approveTestCaseByVera(Async)");
        }
        
        
        com.squareup.okhttp.Call call = approveTestCaseByVeraCall(projectId, testCaseId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * test-case.vera.approve
     * 
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource approveTestCaseByVera(Long projectId, Long testCaseId) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = approveTestCaseByVeraWithHttpInfo(projectId, testCaseId);
        return resp.getData();
    }

    /**
     * test-case.vera.approve
     * 
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> approveTestCaseByVeraWithHttpInfo(Long projectId, Long testCaseId) throws ApiException {
        com.squareup.okhttp.Call call = approveTestCaseByVeraValidateBeforeCall(projectId, testCaseId, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * test-case.vera.approve (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTestCaseByVeraAsync(Long projectId, Long testCaseId, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTestCaseByVeraValidateBeforeCall(projectId, testCaseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTestCase */
    private com.squareup.okhttp.Call createTestCaseCall(Long projectId, TestCaseWithCustomFieldResource body, String agentId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (agentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "agentId", agentId));
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTestCaseValidateBeforeCall(Long projectId, TestCaseWithCustomFieldResource body, String agentId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTestCase(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTestCaseCall(projectId, body, agentId, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Test Case
     * To create a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If &lt;em&gt;parent_id&lt;/em&gt; is omitted, the Test Case will be created under \&quot;Created via API\&quot; Module.  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  Support create test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param agentId  (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource createTestCase(Long projectId, TestCaseWithCustomFieldResource body, String agentId, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = createTestCaseWithHttpInfo(projectId, body, agentId, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Creates a Test Case
     * To create a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If &lt;em&gt;parent_id&lt;/em&gt; is omitted, the Test Case will be created under \&quot;Created via API\&quot; Module.  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  Support create test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param agentId  (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> createTestCaseWithHttpInfo(Long projectId, TestCaseWithCustomFieldResource body, String agentId, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createTestCaseValidateBeforeCall(projectId, body, agentId, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Test Case (asynchronously)
     * To create a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If &lt;em&gt;parent_id&lt;/em&gt; is omitted, the Test Case will be created under \&quot;Created via API\&quot; Module.  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case.  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  Support create test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param agentId  (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTestCaseAsync(Long projectId, TestCaseWithCustomFieldResource body, String agentId, Boolean showParamIdentifier, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTestCaseValidateBeforeCall(projectId, body, agentId, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTestCase */
    private com.squareup.okhttp.Call deleteTestCaseCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestCaseValidateBeforeCall(Long projectId, Long testCaseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTestCase(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling deleteTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestCaseCall(projectId, testCaseId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Test Case
     * To delete Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestCase(Long projectId, Long testCaseId) throws ApiException {
        deleteTestCaseWithHttpInfo(projectId, testCaseId);
    }

    /**
     * Deletes a Test Case
     * To delete Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestCaseWithHttpInfo(Long projectId, Long testCaseId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestCaseValidateBeforeCall(projectId, testCaseId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Test Case (asynchronously)
     * To delete Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestCaseAsync(Long projectId, Long testCaseId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestCaseValidateBeforeCall(projectId, testCaseId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTestCaseComment */
    private com.squareup.okhttp.Call deleteTestCaseCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestCaseCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTestCaseComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling deleteTestCaseComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteTestCaseComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestCaseCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Comment of a Test Case
     * To delete a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestCaseComment(Long projectId, String idOrKey, Long commentId) throws ApiException {
        deleteTestCaseCommentWithHttpInfo(projectId, idOrKey, commentId);
    }

    /**
     * Deletes a Comment of a Test Case
     * To delete a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestCaseCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestCaseCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Comment of a Test Case (asynchronously)
     * To delete a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestCaseCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestCaseCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTestStep */
    private com.squareup.okhttp.Call deleteTestStepCall(Long projectId, Long testCaseId, Long stepId, Boolean updateVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
        .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (updateVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateVersion", updateVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestStepValidateBeforeCall(Long projectId, Long testCaseId, Long stepId, Boolean updateVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTestStep(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling deleteTestStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling deleteTestStep(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestStepCall(projectId, testCaseId, stepId, updateVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Test Step
     * To delete a test step of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param updateVersion If you specify updateVersion&#x3D;true, the test case version will be updated when the test step deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestStep(Long projectId, Long testCaseId, Long stepId, Boolean updateVersion) throws ApiException {
        deleteTestStepWithHttpInfo(projectId, testCaseId, stepId, updateVersion);
    }

    /**
     * Deletes a Test Step
     * To delete a test step of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param updateVersion If you specify updateVersion&#x3D;true, the test case version will be updated when the test step deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestStepWithHttpInfo(Long projectId, Long testCaseId, Long stepId, Boolean updateVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestStepValidateBeforeCall(projectId, testCaseId, stepId, updateVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Test Step (asynchronously)
     * To delete a test step of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param updateVersion If you specify updateVersion&#x3D;true, the test case version will be updated when the test step deleted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestStepAsync(Long projectId, Long testCaseId, Long stepId, Boolean updateVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestStepValidateBeforeCall(projectId, testCaseId, stepId, updateVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getTestCase */
    private com.squareup.okhttp.Call getTestCaseCall(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCaseValidateBeforeCall(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestCase(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCaseCall(projectId, testCaseId, versionId, expand, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Test Case
     * To retrieve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (optional)
     * @param expand By default, Test Steps are excluded from the response. Specify &lt;em&gt;expand&#x3D;teststep&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource getTestCase(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = getTestCaseWithHttpInfo(projectId, testCaseId, versionId, expand, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets a Test Case
     * To retrieve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (optional)
     * @param expand By default, Test Steps are excluded from the response. Specify &lt;em&gt;expand&#x3D;teststep&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> getTestCaseWithHttpInfo(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestCaseValidateBeforeCall(projectId, testCaseId, versionId, expand, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Case (asynchronously)
     * To retrieve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (optional)
     * @param expand By default, Test Steps are excluded from the response. Specify &lt;em&gt;expand&#x3D;teststep&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCaseAsync(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCaseValidateBeforeCall(projectId, testCaseId, versionId, expand, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestCaseCommentById */
    private com.squareup.okhttp.Call getTestCaseCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCaseCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestCaseCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getTestCaseCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getTestCaseCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCaseCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Comment of a Test Case
     * To retrieve a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getTestCaseCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<CommentResource> resp = getTestCaseCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment of a Test Case
     * To retrieve a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getTestCaseCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = getTestCaseCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment of a Test Case (asynchronously)
     * To retrieve a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCaseCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCaseCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestCaseComments */
    private com.squareup.okhttp.Call getTestCaseCommentsCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCaseCommentsValidateBeforeCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestCaseComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getTestCaseComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCaseCommentsCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Comments of a Test Case
     * To retrieve all comments of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return PagedResourceCommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getTestCaseComments(Long projectId, String idOrKey, Long page, Long pageSize) throws ApiException {
        ApiResponse<PagedResourceCommentResource> resp = getTestCaseCommentsWithHttpInfo(projectId, idOrKey, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Test Case
     * To retrieve all comments of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getTestCaseCommentsWithHttpInfo(Long projectId, String idOrKey, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getTestCaseCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Test Case (asynchronously)
     * To retrieve all comments of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCaseCommentsAsync(Long projectId, String idOrKey, Long page, Long pageSize, final ApiCallback<PagedResourceCommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCaseCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestCaseVersionById */
    private com.squareup.okhttp.Call getTestCaseVersionByIdCall(Long projectId, Long testCaseId, Long versionId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
        .replaceAll("\\{" + "versionId" + "\\}", apiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCaseVersionByIdValidateBeforeCall(Long projectId, Long testCaseId, Long versionId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestCaseVersionById(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestCaseVersionById(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getTestCaseVersionById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCaseVersionByIdCall(projectId, testCaseId, versionId, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a version of a Test Case
     * To retrieve a specific version of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource getTestCaseVersionById(Long projectId, Long testCaseId, Long versionId, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = getTestCaseVersionByIdWithHttpInfo(projectId, testCaseId, versionId, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets a version of a Test Case
     * To retrieve a specific version of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> getTestCaseVersionByIdWithHttpInfo(Long projectId, Long testCaseId, Long versionId, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestCaseVersionByIdValidateBeforeCall(projectId, testCaseId, versionId, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a version of a Test Case (asynchronously)
     * To retrieve a specific version of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCaseVersionByIdAsync(Long projectId, Long testCaseId, Long versionId, Boolean showParamIdentifier, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCaseVersionByIdValidateBeforeCall(projectId, testCaseId, versionId, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestCases */
    private com.squareup.okhttp.Call getTestCasesCall(Long projectId, Long page, Integer size, Long parentId, Boolean expandProps, Boolean expandSteps, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (expandProps != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expandProps", expandProps));
        if (expandSteps != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expandSteps", expandSteps));
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCasesValidateBeforeCall(Long projectId, Long page, Integer size, Long parentId, Boolean expandProps, Boolean expandSteps, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestCases(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getTestCases(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getTestCases(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCasesCall(projectId, page, size, parentId, expandProps, expandSteps, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets multiple Test Cases
     * To retrieve all Test Cases or Test Cases which are located directly under a Module
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
     * @param parentId Module ID (optional)
     * @param expandProps By default, Test Case properties are included in the response. specify &lt;em&gt;expandProps&#x3D;false&lt;/em&gt; to exclude them (optional)
     * @param expandSteps By default, Test Steps are excluded from the response body. Input &lt;em&gt;expandSteps&#x3D;true&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return List&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestCaseWithCustomFieldResource> getTestCases(Long projectId, Long page, Integer size, Long parentId, Boolean expandProps, Boolean expandSteps, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<List<TestCaseWithCustomFieldResource>> resp = getTestCasesWithHttpInfo(projectId, page, size, parentId, expandProps, expandSteps, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets multiple Test Cases
     * To retrieve all Test Cases or Test Cases which are located directly under a Module
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
     * @param parentId Module ID (optional)
     * @param expandProps By default, Test Case properties are included in the response. specify &lt;em&gt;expandProps&#x3D;false&lt;/em&gt; to exclude them (optional)
     * @param expandSteps By default, Test Steps are excluded from the response body. Input &lt;em&gt;expandSteps&#x3D;true&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TestCaseWithCustomFieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestCaseWithCustomFieldResource>> getTestCasesWithHttpInfo(Long projectId, Long page, Integer size, Long parentId, Boolean expandProps, Boolean expandSteps, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestCasesValidateBeforeCall(projectId, page, size, parentId, expandProps, expandSteps, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<TestCaseWithCustomFieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Test Cases (asynchronously)
     * To retrieve all Test Cases or Test Cases which are located directly under a Module
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
     * @param parentId Module ID (optional)
     * @param expandProps By default, Test Case properties are included in the response. specify &lt;em&gt;expandProps&#x3D;false&lt;/em&gt; to exclude them (optional)
     * @param expandSteps By default, Test Steps are excluded from the response body. Input &lt;em&gt;expandSteps&#x3D;true&lt;/em&gt; to include Test Steps (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCasesAsync(Long projectId, Long page, Integer size, Long parentId, Boolean expandProps, Boolean expandSteps, Boolean showParamIdentifier, final ApiCallback<List<TestCaseWithCustomFieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCasesValidateBeforeCall(projectId, page, size, parentId, expandProps, expandSteps, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestCaseWithCustomFieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestStep */
    private com.squareup.okhttp.Call getTestStepCall(Long projectId, Long testCaseId, Long stepId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
        .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestStepValidateBeforeCall(Long projectId, Long testCaseId, Long stepId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestStep(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getTestStep(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestStepCall(projectId, testCaseId, stepId, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Test Step
     * To retrieve a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the test step. (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestStepResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestStepResource getTestStep(Long projectId, Long testCaseId, Long stepId, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestStepResource> resp = getTestStepWithHttpInfo(projectId, testCaseId, stepId, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets a Test Step
     * To retrieve a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the test step. (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestStepResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestStepResource> getTestStepWithHttpInfo(Long projectId, Long testCaseId, Long stepId, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestStepValidateBeforeCall(projectId, testCaseId, stepId, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Step (asynchronously)
     * To retrieve a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the test step. (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestStepAsync(Long projectId, Long testCaseId, Long stepId, Boolean showParamIdentifier, final ApiCallback<TestStepResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestStepValidateBeforeCall(projectId, testCaseId, stepId, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestSteps */
    private com.squareup.okhttp.Call getTestStepsCall(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestStepsValidateBeforeCall(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestSteps(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestSteps(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestStepsCall(projectId, testCaseId, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Test Steps of a Test Case
     * To retrieve all Test Steps of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return List&lt;TestStepResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestStepResource> getTestSteps(Long projectId, Long testCaseId, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<List<TestStepResource>> resp = getTestStepsWithHttpInfo(projectId, testCaseId, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets Test Steps of a Test Case
     * To retrieve all Test Steps of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TestStepResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestStepResource>> getTestStepsWithHttpInfo(Long projectId, Long testCaseId, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestStepsValidateBeforeCall(projectId, testCaseId, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<TestStepResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Test Steps of a Test Case (asynchronously)
     * To retrieve all Test Steps of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestStepsAsync(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ApiCallback<List<TestStepResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestStepsValidateBeforeCall(projectId, testCaseId, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestStepResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestStepsByVersion */
    private com.squareup.okhttp.Call getTestStepsByVersionCall(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}/test-steps".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
        .replaceAll("\\{" + "versionId" + "\\}", apiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestStepsByVersionValidateBeforeCall(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestStepsByVersion(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestStepsByVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getTestStepsByVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestStepsByVersionCall(projectId, testCaseId, versionId, expand, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Test Steps of a Test Case version
     * To retrieve all Test Steps of a specific Test Case version
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;calledteststep&lt;/em&gt; to include Test Steps of the called Test Cases (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return List&lt;TestStepResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestStepResource> getTestStepsByVersion(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<List<TestStepResource>> resp = getTestStepsByVersionWithHttpInfo(projectId, testCaseId, versionId, expand, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets Test Steps of a Test Case version
     * To retrieve all Test Steps of a specific Test Case version
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;calledteststep&lt;/em&gt; to include Test Steps of the called Test Cases (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TestStepResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestStepResource>> getTestStepsByVersionWithHttpInfo(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTestStepsByVersionValidateBeforeCall(projectId, testCaseId, versionId, expand, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<TestStepResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Test Steps of a Test Case version (asynchronously)
     * To retrieve all Test Steps of a specific Test Case version
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param versionId ID of the Test Case version (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;calledteststep&lt;/em&gt; to include Test Steps of the called Test Cases (optional)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestStepsByVersionAsync(Long projectId, Long testCaseId, Long versionId, String expand, Boolean showParamIdentifier, final ApiCallback<List<TestStepResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestStepsByVersionValidateBeforeCall(projectId, testCaseId, versionId, expand, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestStepResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVersions */
    private com.squareup.okhttp.Call getVersionsCall(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsValidateBeforeCall(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getVersions(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionsCall(projectId, testCaseId, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all versions of a Test Case
     * To retrieve all versions of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the test case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return List&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestCaseWithCustomFieldResource> getVersions(Long projectId, Long testCaseId, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<List<TestCaseWithCustomFieldResource>> resp = getVersionsWithHttpInfo(projectId, testCaseId, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Gets all versions of a Test Case
     * To retrieve all versions of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the test case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;TestCaseWithCustomFieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestCaseWithCustomFieldResource>> getVersionsWithHttpInfo(Long projectId, Long testCaseId, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(projectId, testCaseId, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<TestCaseWithCustomFieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all versions of a Test Case (asynchronously)
     * To retrieve all versions of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the test case (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsAsync(Long projectId, Long testCaseId, Boolean showParamIdentifier, final ApiCallback<List<TestCaseWithCustomFieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(projectId, testCaseId, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestCaseWithCustomFieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTestCase */
    private com.squareup.okhttp.Call updateTestCaseCall(Long projectId, Long testCaseId, TestCaseWithCustomFieldResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestCaseValidateBeforeCall(Long projectId, Long testCaseId, TestCaseWithCustomFieldResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTestCase(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling updateTestCase(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestCaseCall(projectId, testCaseId, body, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Test Case
     * To update a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be updated. (required)
     * @param body Test Case properties, Test Steps and other information to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestCaseWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCaseWithCustomFieldResource updateTestCase(Long projectId, Long testCaseId, TestCaseWithCustomFieldResource body, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestCaseWithCustomFieldResource> resp = updateTestCaseWithHttpInfo(projectId, testCaseId, body, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Updates a Test Case
     * To update a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be updated. (required)
     * @param body Test Case properties, Test Steps and other information to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestCaseWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCaseWithCustomFieldResource> updateTestCaseWithHttpInfo(Long projectId, Long testCaseId, TestCaseWithCustomFieldResource body, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateTestCaseValidateBeforeCall(projectId, testCaseId, body, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Test Case (asynchronously)
     * To update a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case which needs to be updated. (required)
     * @param body Test Case properties, Test Steps and other information to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestCaseAsync(Long projectId, Long testCaseId, TestCaseWithCustomFieldResource body, Boolean showParamIdentifier, final ApiCallback<TestCaseWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestCaseValidateBeforeCall(projectId, testCaseId, body, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCaseWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTestCaseComment */
    private com.squareup.okhttp.Call updateTestCaseCommentCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestCaseCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTestCaseComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling updateTestCaseComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateTestCaseComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestCaseComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestCaseCommentCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Comment of a Test Case
     * To modify a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @param body The comment&#39;s updated content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateTestCaseComment(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = updateTestCaseCommentWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Test Case
     * To modify a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @param body The comment&#39;s updated content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateTestCaseCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateTestCaseCommentValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Test Case (asynchronously)
     * To modify a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Case (required)
     * @param commentId ID of the comment. (required)
     * @param body The comment&#39;s updated content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestCaseCommentAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestCaseCommentValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTestStep */
    private com.squareup.okhttp.Call updateTestStepCall(Long projectId, Long testCaseId, Long stepId, TestStepResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
        .replaceAll("\\{" + "stepId" + "\\}", apiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showParamIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showParamIdentifier", showParamIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestStepValidateBeforeCall(Long projectId, Long testCaseId, Long stepId, TestStepResource body, Boolean showParamIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTestStep(Async)");
        }
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling updateTestStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling updateTestStep(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestStep(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestStepCall(projectId, testCaseId, stepId, body, showParamIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Test Step
     * To update a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param body Updated content of the Test Step  Support update test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return TestStepResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestStepResource updateTestStep(Long projectId, Long testCaseId, Long stepId, TestStepResource body, Boolean showParamIdentifier) throws ApiException {
        ApiResponse<TestStepResource> resp = updateTestStepWithHttpInfo(projectId, testCaseId, stepId, body, showParamIdentifier);
        return resp.getData();
    }

    /**
     * Update a Test Step
     * To update a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param body Updated content of the Test Step  Support update test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @return ApiResponse&lt;TestStepResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestStepResource> updateTestStepWithHttpInfo(Long projectId, Long testCaseId, Long stepId, TestStepResource body, Boolean showParamIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateTestStepValidateBeforeCall(projectId, testCaseId, stepId, body, showParamIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Test Step (asynchronously)
     * To update a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCaseId ID of the Test Case (required)
     * @param stepId ID of the Test Step (required)
     * @param body Updated content of the Test Step  Support update test step with Parameters by inputting parameters identifier in teststep&#39;s &lt;em&gt;description&lt;/em&gt; with sample like below. Parameters will be automatically added to current project.  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      \&quot;description\&quot;: \&quot;Description [~param1] with [~param2].\&quot; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;      ... &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    { (required)
     * @param showParamIdentifier By default, Parameters in Test Steps are displayed in ID number mode (like \&quot;&lt;strong&gt;[~123]&lt;/strong&gt;\&quot;). Input &lt;strong&gt;&lt;em&gt;showParamIdentifier&#x3D;true&lt;/em&gt;&lt;/strong&gt; to change to Identifier text mode. Result should be like \&quot;&lt;strong&gt;[~myIdentifier]&lt;/strong&gt;\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestStepAsync(Long projectId, Long testCaseId, Long stepId, TestStepResource body, Boolean showParamIdentifier, final ApiCallback<TestStepResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestStepValidateBeforeCall(projectId, testCaseId, stepId, body, showParamIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestStepResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

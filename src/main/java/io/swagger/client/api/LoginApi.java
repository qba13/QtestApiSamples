/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.OAuthResponse;
import io.swagger.client.model.OAuthTokenStatusVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoginApi {
    private ApiClient apiClient;

    public LoginApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoginApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for postAccessToken */
    private com.squareup.okhttp.Call postAccessTokenCall(String grantType, String username, String password, String refreshToken, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/token".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null)
        localVarFormParams.put("grant_type", grantType);
        if (username != null)
        localVarFormParams.put("username", username);
        if (password != null)
        localVarFormParams.put("password", password);
        if (refreshToken != null)
        localVarFormParams.put("refresh_token", refreshToken);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccessTokenValidateBeforeCall(String grantType, String username, String password, String refreshToken, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = postAccessTokenCall(grantType, username, password, refreshToken, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Log in
     * To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter &lt;em&gt;content-type&#x3D;application/x-www-form-urlencoded&lt;/em&gt;
     * @param grantType Use &lt;em&gt;grant_type&#x3D;password&lt;/em&gt; or &lt;em&gt;grant_type&#x3D;refresh_token&lt;/em&gt; to refresh access token (optional, default to password)
     * @param username Your qTest Manager username (optional)
     * @param password Your qTest Manager password (optional)
     * @param refreshToken qTest refresh token to refresh access token associate with provided refresh token (optional)
     * @param authorization Basic + [base64 string of \&quot;&lt;strong&gt;your qTest site name and colon&lt;/strong&gt;\&quot;]  or Basic cXRlc3QtYXBpOg&#x3D;&#x3D; [base64 string of \&quot;&lt;strong&gt;qtest-api:&lt;/strong&gt;\&quot;] to use refresh token (grant_type &#x3D; refresh_token)  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + &#39;:&#39;, then Authorization is: Basic YXBpdHJ5b3V0Og&#x3D;&#x3D; (optional)
     * @return OAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OAuthResponse postAccessToken(String grantType, String username, String password, String refreshToken, String authorization) throws ApiException {
        ApiResponse<OAuthResponse> resp = postAccessTokenWithHttpInfo(grantType, username, password, refreshToken, authorization);
        return resp.getData();
    }

    /**
     * Log in
     * To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter &lt;em&gt;content-type&#x3D;application/x-www-form-urlencoded&lt;/em&gt;
     * @param grantType Use &lt;em&gt;grant_type&#x3D;password&lt;/em&gt; or &lt;em&gt;grant_type&#x3D;refresh_token&lt;/em&gt; to refresh access token (optional, default to password)
     * @param username Your qTest Manager username (optional)
     * @param password Your qTest Manager password (optional)
     * @param refreshToken qTest refresh token to refresh access token associate with provided refresh token (optional)
     * @param authorization Basic + [base64 string of \&quot;&lt;strong&gt;your qTest site name and colon&lt;/strong&gt;\&quot;]  or Basic cXRlc3QtYXBpOg&#x3D;&#x3D; [base64 string of \&quot;&lt;strong&gt;qtest-api:&lt;/strong&gt;\&quot;] to use refresh token (grant_type &#x3D; refresh_token)  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + &#39;:&#39;, then Authorization is: Basic YXBpdHJ5b3V0Og&#x3D;&#x3D; (optional)
     * @return ApiResponse&lt;OAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OAuthResponse> postAccessTokenWithHttpInfo(String grantType, String username, String password, String refreshToken, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = postAccessTokenValidateBeforeCall(grantType, username, password, refreshToken, authorization, null, null);
        Type localVarReturnType = new TypeToken<OAuthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log in (asynchronously)
     * To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter &lt;em&gt;content-type&#x3D;application/x-www-form-urlencoded&lt;/em&gt;
     * @param grantType Use &lt;em&gt;grant_type&#x3D;password&lt;/em&gt; or &lt;em&gt;grant_type&#x3D;refresh_token&lt;/em&gt; to refresh access token (optional, default to password)
     * @param username Your qTest Manager username (optional)
     * @param password Your qTest Manager password (optional)
     * @param refreshToken qTest refresh token to refresh access token associate with provided refresh token (optional)
     * @param authorization Basic + [base64 string of \&quot;&lt;strong&gt;your qTest site name and colon&lt;/strong&gt;\&quot;]  or Basic cXRlc3QtYXBpOg&#x3D;&#x3D; [base64 string of \&quot;&lt;strong&gt;qtest-api:&lt;/strong&gt;\&quot;] to use refresh token (grant_type &#x3D; refresh_token)  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + &#39;:&#39;, then Authorization is: Basic YXBpdHJ5b3V0Og&#x3D;&#x3D; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccessTokenAsync(String grantType, String username, String password, String refreshToken, String authorization, final ApiCallback<OAuthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccessTokenValidateBeforeCall(grantType, username, password, refreshToken, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OAuthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tokenStatus */
    private com.squareup.okhttp.Call tokenStatusCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tokenStatusValidateBeforeCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = tokenStatusCall(authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status of access token
     * Gets status of access token
     * @param authorization The qTest access token you want to check (optional)
     * @return OAuthTokenStatusVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OAuthTokenStatusVM tokenStatus(String authorization) throws ApiException {
        ApiResponse<OAuthTokenStatusVM> resp = tokenStatusWithHttpInfo(authorization);
        return resp.getData();
    }

    /**
     * Gets status of access token
     * Gets status of access token
     * @param authorization The qTest access token you want to check (optional)
     * @return ApiResponse&lt;OAuthTokenStatusVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OAuthTokenStatusVM> tokenStatusWithHttpInfo(String authorization) throws ApiException {
        com.squareup.okhttp.Call call = tokenStatusValidateBeforeCall(authorization, null, null);
        Type localVarReturnType = new TypeToken<OAuthTokenStatusVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status of access token (asynchronously)
     * Gets status of access token
     * @param authorization The qTest access token you want to check (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tokenStatusAsync(String authorization, final ApiCallback<OAuthTokenStatusVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tokenStatusValidateBeforeCall(authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OAuthTokenStatusVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TestSuiteWithCustomFieldResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestSuiteApi {
    private ApiClient apiClient;

    public TestSuiteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestSuiteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createTestSuite */
    private com.squareup.okhttp.Call createTestSuiteCall(Long projectId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-suites".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTestSuiteValidateBeforeCall(Long projectId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTestSuite(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTestSuite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTestSuiteCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Test Suite
     * To create a new Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body The Test Suite&#39;s properties (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @return TestSuiteWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSuiteWithCustomFieldResource createTestSuite(Long projectId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<TestSuiteWithCustomFieldResource> resp = createTestSuiteWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Creates a Test Suite
     * To create a new Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body The Test Suite&#39;s properties (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestSuiteWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSuiteWithCustomFieldResource> createTestSuiteWithHttpInfo(Long projectId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = createTestSuiteValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Test Suite (asynchronously)
     * To create a new Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body The Test Suite&#39;s properties (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTestSuiteAsync(Long projectId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, final ApiCallback<TestSuiteWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTestSuiteValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTestSuiteById */
    private com.squareup.okhttp.Call deleteTestSuiteByIdCall(Long projectId, Long testSuiteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testSuiteId" + "\\}", apiClient.escapeString(testSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestSuiteByIdValidateBeforeCall(Long projectId, Long testSuiteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTestSuiteById(Async)");
        }
        
        // verify the required parameter 'testSuiteId' is set
        if (testSuiteId == null) {
            throw new ApiException("Missing the required parameter 'testSuiteId' when calling deleteTestSuiteById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestSuiteByIdCall(projectId, testSuiteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Test Suite
     * To delete a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteTestSuiteById(Long projectId, Long testSuiteId) throws ApiException {
        ApiResponse<Object> resp = deleteTestSuiteByIdWithHttpInfo(projectId, testSuiteId);
        return resp.getData();
    }

    /**
     * Deletes a Test Suite
     * To delete a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteTestSuiteByIdWithHttpInfo(Long projectId, Long testSuiteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestSuiteByIdValidateBeforeCall(projectId, testSuiteId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Test Suite (asynchronously)
     * To delete a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestSuiteByIdAsync(Long projectId, Long testSuiteId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestSuiteByIdValidateBeforeCall(projectId, testSuiteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getListTestSuite */
    private com.squareup.okhttp.Call getListTestSuiteCall(Long projectId, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-suites".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListTestSuiteValidateBeforeCall(Long projectId, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getListTestSuite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getListTestSuiteCall(projectId, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets multiple Test Suite
     * To retrieve Test Suites which located under a parent Release, Test Cycle or root  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @return List&lt;TestSuiteWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestSuiteWithCustomFieldResource> getListTestSuite(Long projectId, Long parentId, String parentType) throws ApiException {
        ApiResponse<List<TestSuiteWithCustomFieldResource>> resp = getListTestSuiteWithHttpInfo(projectId, parentId, parentType);
        return resp.getData();
    }

    /**
     * Gets multiple Test Suite
     * To retrieve Test Suites which located under a parent Release, Test Cycle or root  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @return ApiResponse&lt;List&lt;TestSuiteWithCustomFieldResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestSuiteWithCustomFieldResource>> getListTestSuiteWithHttpInfo(Long projectId, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = getListTestSuiteValidateBeforeCall(projectId, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<List<TestSuiteWithCustomFieldResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Test Suite (asynchronously)
     * To retrieve Test Suites which located under a parent Release, Test Cycle or root  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root (optional)
     * @param parentType Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListTestSuiteAsync(Long projectId, Long parentId, String parentType, final ApiCallback<List<TestSuiteWithCustomFieldResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListTestSuiteValidateBeforeCall(projectId, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestSuiteWithCustomFieldResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestSuite */
    private com.squareup.okhttp.Call getTestSuiteCall(Long projectId, Long testSuiteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testSuiteId" + "\\}", apiClient.escapeString(testSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestSuiteValidateBeforeCall(Long projectId, Long testSuiteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestSuite(Async)");
        }
        
        // verify the required parameter 'testSuiteId' is set
        if (testSuiteId == null) {
            throw new ApiException("Missing the required parameter 'testSuiteId' when calling getTestSuite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestSuiteCall(projectId, testSuiteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Test Suite
     * To retrieve a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @return TestSuiteWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSuiteWithCustomFieldResource getTestSuite(Long projectId, Long testSuiteId) throws ApiException {
        ApiResponse<TestSuiteWithCustomFieldResource> resp = getTestSuiteWithHttpInfo(projectId, testSuiteId);
        return resp.getData();
    }

    /**
     * Gets a Test Suite
     * To retrieve a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @return ApiResponse&lt;TestSuiteWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSuiteWithCustomFieldResource> getTestSuiteWithHttpInfo(Long projectId, Long testSuiteId) throws ApiException {
        com.squareup.okhttp.Call call = getTestSuiteValidateBeforeCall(projectId, testSuiteId, null, null);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Suite (asynchronously)
     * To retrieve a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestSuiteAsync(Long projectId, Long testSuiteId, final ApiCallback<TestSuiteWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestSuiteValidateBeforeCall(projectId, testSuiteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTestSuite */
    private com.squareup.okhttp.Call updateTestSuiteCall(Long projectId, Long testSuiteId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, Boolean noEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testSuiteId" + "\\}", apiClient.escapeString(testSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));
        if (noEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noEmail", noEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestSuiteValidateBeforeCall(Long projectId, Long testSuiteId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, Boolean noEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTestSuite(Async)");
        }
        
        // verify the required parameter 'testSuiteId' is set
        if (testSuiteId == null) {
            throw new ApiException("Missing the required parameter 'testSuiteId' when calling updateTestSuite(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestSuite(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestSuiteCall(projectId, testSuiteId, body, parentId, parentType, noEmail, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Test Suite
     * To update an existing Test Suite or to move it to other container  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters &lt;em&gt;parentId&lt;/em&gt; and &lt;em&gt;parentType&lt;/em&gt;, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @param body The Test Suite&#39;s updated properties (required)
     * @param parentId ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root (optional)
     * @param parentType Artifact type of the parent container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @param noEmail  (optional)
     * @return TestSuiteWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSuiteWithCustomFieldResource updateTestSuite(Long projectId, Long testSuiteId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, Boolean noEmail) throws ApiException {
        ApiResponse<TestSuiteWithCustomFieldResource> resp = updateTestSuiteWithHttpInfo(projectId, testSuiteId, body, parentId, parentType, noEmail);
        return resp.getData();
    }

    /**
     * Updates a Test Suite
     * To update an existing Test Suite or to move it to other container  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters &lt;em&gt;parentId&lt;/em&gt; and &lt;em&gt;parentType&lt;/em&gt;, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @param body The Test Suite&#39;s updated properties (required)
     * @param parentId ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root (optional)
     * @param parentType Artifact type of the parent container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @param noEmail  (optional)
     * @return ApiResponse&lt;TestSuiteWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSuiteWithCustomFieldResource> updateTestSuiteWithHttpInfo(Long projectId, Long testSuiteId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, Boolean noEmail) throws ApiException {
        com.squareup.okhttp.Call call = updateTestSuiteValidateBeforeCall(projectId, testSuiteId, body, parentId, parentType, noEmail, null, null);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Test Suite (asynchronously)
     * To update an existing Test Suite or to move it to other container  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters &lt;em&gt;parentId&lt;/em&gt; and &lt;em&gt;parentType&lt;/em&gt;, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body
     * @param projectId ID of the project (required)
     * @param testSuiteId ID of the Test Suite (required)
     * @param body The Test Suite&#39;s updated properties (required)
     * @param parentId ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root (optional)
     * @param parentType Artifact type of the parent container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt; (optional)
     * @param noEmail  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestSuiteAsync(Long projectId, Long testSuiteId, TestSuiteWithCustomFieldResource body, Long parentId, String parentType, Boolean noEmail, final ApiCallback<TestSuiteWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestSuiteValidateBeforeCall(projectId, testSuiteId, body, parentId, parentType, noEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSuiteWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

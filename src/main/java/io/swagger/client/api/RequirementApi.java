/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CommentResource;
import io.swagger.client.model.PagedResourceCommentResource;
import io.swagger.client.model.RequirementResource;
import io.swagger.client.model.TraceabilityRequirement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequirementApi {
    private ApiClient apiClient;

    public RequirementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequirementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addRequirementComment */
    private com.squareup.okhttp.Call addRequirementCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRequirementCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addRequirementComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling addRequirementComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRequirementComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRequirementCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a Comment to a Requirement
     * To add a comment to a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement. (required)
     * @param body The comment&#39;s properties and its content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addRequirementComment(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = addRequirementCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Requirement
     * To add a comment to a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement. (required)
     * @param body The comment&#39;s properties and its content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addRequirementCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = addRequirementCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Requirement (asynchronously)
     * To add a comment to a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement. (required)
     * @param body The comment&#39;s properties and its content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRequirementCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRequirementCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createRequirement */
    private com.squareup.okhttp.Call createRequirementCall(Long projectId, RequirementResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRequirementValidateBeforeCall(Long projectId, RequirementResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createRequirement(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRequirement(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createRequirementCall(projectId, body, parentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Requirement
     * To create a new Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;p&gt;&lt;em&gt;name *:&lt;/em&gt; Requirement name&lt;/p&gt;&lt;p&gt;&lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs&lt;/p&gt; (required)
     * @param parentId ID of the parent Module under which the Requirement will be located (optional)
     * @return RequirementResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequirementResource createRequirement(Long projectId, RequirementResource body, Long parentId) throws ApiException {
        ApiResponse<RequirementResource> resp = createRequirementWithHttpInfo(projectId, body, parentId);
        return resp.getData();
    }

    /**
     * Creates a Requirement
     * To create a new Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;p&gt;&lt;em&gt;name *:&lt;/em&gt; Requirement name&lt;/p&gt;&lt;p&gt;&lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs&lt;/p&gt; (required)
     * @param parentId ID of the parent Module under which the Requirement will be located (optional)
     * @return ApiResponse&lt;RequirementResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequirementResource> createRequirementWithHttpInfo(Long projectId, RequirementResource body, Long parentId) throws ApiException {
        com.squareup.okhttp.Call call = createRequirementValidateBeforeCall(projectId, body, parentId, null, null);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Requirement (asynchronously)
     * To create a new Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;p&gt;&lt;em&gt;name *:&lt;/em&gt; Requirement name&lt;/p&gt;&lt;p&gt;&lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs&lt;/p&gt; (required)
     * @param parentId ID of the parent Module under which the Requirement will be located (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRequirementAsync(Long projectId, RequirementResource body, Long parentId, final ApiCallback<RequirementResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRequirementValidateBeforeCall(projectId, body, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteRequirementById */
    private com.squareup.okhttp.Call deleteRequirementByIdCall(Long projectId, Long requirementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{requirementId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "requirementId" + "\\}", apiClient.escapeString(requirementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRequirementByIdValidateBeforeCall(Long projectId, Long requirementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteRequirementById(Async)");
        }
        
        // verify the required parameter 'requirementId' is set
        if (requirementId == null) {
            throw new ApiException("Missing the required parameter 'requirementId' when calling deleteRequirementById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRequirementByIdCall(projectId, requirementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Requirement
     * To delete a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be deleted. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteRequirementById(Long projectId, Long requirementId) throws ApiException {
        ApiResponse<Object> resp = deleteRequirementByIdWithHttpInfo(projectId, requirementId);
        return resp.getData();
    }

    /**
     * Deletes a Requirement
     * To delete a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be deleted. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteRequirementByIdWithHttpInfo(Long projectId, Long requirementId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRequirementByIdValidateBeforeCall(projectId, requirementId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Requirement (asynchronously)
     * To delete a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRequirementByIdAsync(Long projectId, Long requirementId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRequirementByIdValidateBeforeCall(projectId, requirementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteRequirementCommentById */
    private com.squareup.okhttp.Call deleteRequirementCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRequirementCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling deleteRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteRequirementCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRequirementCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Comment of a Requirement
     * To delete a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteRequirementCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<Object> resp = deleteRequirementCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Deletes a Comment of a Requirement
     * To delete a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteRequirementCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Comment of a Requirement (asynchronously)
     * To delete a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRequirementCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllRequirementComments */
    private com.squareup.okhttp.Call getAllRequirementCommentsCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRequirementCommentsValidateBeforeCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAllRequirementComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getAllRequirementComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllRequirementCommentsCall(projectId, idOrKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Comments of a Requirement
     * To retrieve all comments of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comments you want to retrieve (required)
     * @return PagedResourceCommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getAllRequirementComments(Long projectId, String idOrKey) throws ApiException {
        ApiResponse<PagedResourceCommentResource> resp = getAllRequirementCommentsWithHttpInfo(projectId, idOrKey);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Requirement
     * To retrieve all comments of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comments you want to retrieve (required)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getAllRequirementCommentsWithHttpInfo(Long projectId, String idOrKey) throws ApiException {
        com.squareup.okhttp.Call call = getAllRequirementCommentsValidateBeforeCall(projectId, idOrKey, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Requirement (asynchronously)
     * To retrieve all comments of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comments you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRequirementCommentsAsync(Long projectId, String idOrKey, final ApiCallback<PagedResourceCommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRequirementCommentsValidateBeforeCall(projectId, idOrKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPublicTraceabilityMatrixReport */
    private com.squareup.okhttp.Call getPublicTraceabilityMatrixReportCall(Long projectId, Long page, Integer size, String fieldIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/trace-matrix-report".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (fieldIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIds", fieldIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPublicTraceabilityMatrixReportValidateBeforeCall(Long projectId, Long page, Integer size, String fieldIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getPublicTraceabilityMatrixReport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPublicTraceabilityMatrixReportCall(projectId, page, size, fieldIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Requirement Traceability Matrix Report
     * To retrieve a report of Requirements with their covering Test Cases
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999. (optional, default to 20)
     * @param fieldIds ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas. (optional)
     * @return List&lt;TraceabilityRequirement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TraceabilityRequirement> getPublicTraceabilityMatrixReport(Long projectId, Long page, Integer size, String fieldIds) throws ApiException {
        ApiResponse<List<TraceabilityRequirement>> resp = getPublicTraceabilityMatrixReportWithHttpInfo(projectId, page, size, fieldIds);
        return resp.getData();
    }

    /**
     * Gets Requirement Traceability Matrix Report
     * To retrieve a report of Requirements with their covering Test Cases
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999. (optional, default to 20)
     * @param fieldIds ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas. (optional)
     * @return ApiResponse&lt;List&lt;TraceabilityRequirement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TraceabilityRequirement>> getPublicTraceabilityMatrixReportWithHttpInfo(Long projectId, Long page, Integer size, String fieldIds) throws ApiException {
        com.squareup.okhttp.Call call = getPublicTraceabilityMatrixReportValidateBeforeCall(projectId, page, size, fieldIds, null, null);
        Type localVarReturnType = new TypeToken<List<TraceabilityRequirement>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Requirement Traceability Matrix Report (asynchronously)
     * To retrieve a report of Requirements with their covering Test Cases
     * @param projectId ID of the project (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999. (optional, default to 20)
     * @param fieldIds ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPublicTraceabilityMatrixReportAsync(Long projectId, Long page, Integer size, String fieldIds, final ApiCallback<List<TraceabilityRequirement>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPublicTraceabilityMatrixReportValidateBeforeCall(projectId, page, size, fieldIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TraceabilityRequirement>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRequirement */
    private com.squareup.okhttp.Call getRequirementCall(Long projectId, Long requirementId, Boolean includeExternalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{requirementId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "requirementId" + "\\}", apiClient.escapeString(requirementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (includeExternalProperties != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeExternalProperties", includeExternalProperties));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRequirementValidateBeforeCall(Long projectId, Long requirementId, Boolean includeExternalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRequirement(Async)");
        }
        
        // verify the required parameter 'requirementId' is set
        if (requirementId == null) {
            throw new ApiException("Missing the required parameter 'requirementId' when calling getRequirement(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRequirementCall(projectId, requirementId, includeExternalProperties, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Requirement
     * To retrieve a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which you want to retrieve. (required)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @return RequirementResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequirementResource getRequirement(Long projectId, Long requirementId, Boolean includeExternalProperties) throws ApiException {
        ApiResponse<RequirementResource> resp = getRequirementWithHttpInfo(projectId, requirementId, includeExternalProperties);
        return resp.getData();
    }

    /**
     * Gets a Requirement
     * To retrieve a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which you want to retrieve. (required)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @return ApiResponse&lt;RequirementResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequirementResource> getRequirementWithHttpInfo(Long projectId, Long requirementId, Boolean includeExternalProperties) throws ApiException {
        com.squareup.okhttp.Call call = getRequirementValidateBeforeCall(projectId, requirementId, includeExternalProperties, null, null);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Requirement (asynchronously)
     * To retrieve a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which you want to retrieve. (required)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRequirementAsync(Long projectId, Long requirementId, Boolean includeExternalProperties, final ApiCallback<RequirementResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRequirementValidateBeforeCall(projectId, requirementId, includeExternalProperties, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRequirementCommentById */
    private com.squareup.okhttp.Call getRequirementCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRequirementCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getRequirementCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRequirementCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Comment of a Requirement
     * To retrieve a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getRequirementCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<CommentResource> resp = getRequirementCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment of a Requirement
     * To retrieve a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getRequirementCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = getRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment of a Requirement (asynchronously)
     * To retrieve a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to delete (required)
     * @param commentId The comment&#39;s ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRequirementCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRequirements */
    private com.squareup.okhttp.Call getRequirementsCall(Long projectId, Long parentId, Long page, Integer size, Boolean includeExternalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (includeExternalProperties != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeExternalProperties", includeExternalProperties));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRequirementsValidateBeforeCall(Long projectId, Long parentId, Long page, Integer size, Boolean includeExternalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRequirements(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRequirementsCall(projectId, parentId, page, size, includeExternalProperties, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets multiple Requirements
     * To retrieve all Requirements or Requirements under a specific Module
     * @param projectId ID of the project (required)
     * @param parentId Specify the parent Module&#39;s ID to retrieve all of its Requirements which are located directly under the parent Module (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (optional)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @return List&lt;RequirementResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RequirementResource> getRequirements(Long projectId, Long parentId, Long page, Integer size, Boolean includeExternalProperties) throws ApiException {
        ApiResponse<List<RequirementResource>> resp = getRequirementsWithHttpInfo(projectId, parentId, page, size, includeExternalProperties);
        return resp.getData();
    }

    /**
     * Gets multiple Requirements
     * To retrieve all Requirements or Requirements under a specific Module
     * @param projectId ID of the project (required)
     * @param parentId Specify the parent Module&#39;s ID to retrieve all of its Requirements which are located directly under the parent Module (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (optional)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @return ApiResponse&lt;List&lt;RequirementResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RequirementResource>> getRequirementsWithHttpInfo(Long projectId, Long parentId, Long page, Integer size, Boolean includeExternalProperties) throws ApiException {
        com.squareup.okhttp.Call call = getRequirementsValidateBeforeCall(projectId, parentId, page, size, includeExternalProperties, null, null);
        Type localVarReturnType = new TypeToken<List<RequirementResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Requirements (asynchronously)
     * To retrieve all Requirements or Requirements under a specific Module
     * @param projectId ID of the project (required)
     * @param parentId Specify the parent Module&#39;s ID to retrieve all of its Requirements which are located directly under the parent Module (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve requirements. (optional, default to 1)
     * @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (optional)
     * @param includeExternalProperties By default, Requirement external properties are not included in the response. Specify includeExternalProperties&#x3D;true to include them. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRequirementsAsync(Long projectId, Long parentId, Long page, Integer size, Boolean includeExternalProperties, final ApiCallback<List<RequirementResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRequirementsValidateBeforeCall(projectId, parentId, page, size, includeExternalProperties, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RequirementResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateRequirement */
    private com.squareup.okhttp.Call updateRequirementCall(Long projectId, Long requirementId, RequirementResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{requirementId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "requirementId" + "\\}", apiClient.escapeString(requirementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRequirementValidateBeforeCall(Long projectId, Long requirementId, RequirementResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateRequirement(Async)");
        }
        
        // verify the required parameter 'requirementId' is set
        if (requirementId == null) {
            throw new ApiException("Missing the required parameter 'requirementId' when calling updateRequirement(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRequirement(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRequirementCall(projectId, requirementId, body, parentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Requirement
     * To update properties of an Requirement or to move it to other parent Module
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be updated. (required)
     * @param body &lt;strong&gt;name: *&lt;/strong&gt; Requirement name.  &lt;strong&gt;properties:&lt;/strong&gt; An array of field-value pairs (required)
     * @param parentId ID of the parent Module to which the Requirement will be moved to (optional)
     * @return RequirementResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequirementResource updateRequirement(Long projectId, Long requirementId, RequirementResource body, Long parentId) throws ApiException {
        ApiResponse<RequirementResource> resp = updateRequirementWithHttpInfo(projectId, requirementId, body, parentId);
        return resp.getData();
    }

    /**
     * Updates a Requirement
     * To update properties of an Requirement or to move it to other parent Module
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be updated. (required)
     * @param body &lt;strong&gt;name: *&lt;/strong&gt; Requirement name.  &lt;strong&gt;properties:&lt;/strong&gt; An array of field-value pairs (required)
     * @param parentId ID of the parent Module to which the Requirement will be moved to (optional)
     * @return ApiResponse&lt;RequirementResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequirementResource> updateRequirementWithHttpInfo(Long projectId, Long requirementId, RequirementResource body, Long parentId) throws ApiException {
        com.squareup.okhttp.Call call = updateRequirementValidateBeforeCall(projectId, requirementId, body, parentId, null, null);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Requirement (asynchronously)
     * To update properties of an Requirement or to move it to other parent Module
     * @param projectId ID of the project (required)
     * @param requirementId ID of the Requirement which needs to be updated. (required)
     * @param body &lt;strong&gt;name: *&lt;/strong&gt; Requirement name.  &lt;strong&gt;properties:&lt;/strong&gt; An array of field-value pairs (required)
     * @param parentId ID of the parent Module to which the Requirement will be moved to (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRequirementAsync(Long projectId, Long requirementId, RequirementResource body, Long parentId, final ApiCallback<RequirementResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRequirementValidateBeforeCall(projectId, requirementId, body, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequirementResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateRequirementCommentById */
    private com.squareup.okhttp.Call updateRequirementCommentByIdCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRequirementCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling updateRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateRequirementCommentById(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRequirementCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRequirementCommentByIdCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Comment of a Requirement
     * To modify a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to update (required)
     * @param commentId The comment&#39;s ID (required)
     * @param body The comment&#39;s updated content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateRequirementCommentById(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = updateRequirementCommentByIdWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Requirement
     * To modify a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to update (required)
     * @param commentId The comment&#39;s ID (required)
     * @param body The comment&#39;s updated content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateRequirementCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Requirement (asynchronously)
     * To modify a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Requirement whose comment you want to update (required)
     * @param commentId The comment&#39;s ID (required)
     * @param body The comment&#39;s updated content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRequirementCommentByIdAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRequirementCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

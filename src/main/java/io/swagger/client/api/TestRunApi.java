/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AutomationObjectTree;
import io.swagger.client.model.CommentResource;
import io.swagger.client.model.Message;
import io.swagger.client.model.PagedResourceCommentResource;
import io.swagger.client.model.QueueProcessingResponseTestRunDataVM;
import io.swagger.client.model.StatusResource;
import io.swagger.client.model.TestRunListResource;
import io.swagger.client.model.TestRunWithCustomFieldResource;
import io.swagger.client.model.TestRunWithParameterCreateByDatasetResource;
import io.swagger.client.model.TestRunWithParameterCreateManualResource;
import io.swagger.client.model.TestRunWithParameterCreateRandomResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestRunApi {
    private ApiClient apiClient;

    public TestRunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestRunApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addTestRunComment */
    private com.squareup.okhttp.Call addTestRunCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestRunComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling addTestRunComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestRunComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestRunCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a Comment to a Test Run
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addTestRunComment(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = addTestRunCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Test Run
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addTestRunCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = addTestRunCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Test Run (asynchronously)
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTestRunWithParameters */
    private com.squareup.okhttp.Call addTestRunWithParametersCall(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/manually".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersValidateBeforeCall(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestRunWithParameters(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestRunWithParameters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestRunWithParametersCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create multiple Test Runs with Parameter values manual
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParameters(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values manual
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersWithHttpInfo(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values manual (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersAsync(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTestRunWithParametersDataset */
    private com.squareup.okhttp.Call addTestRunWithParametersDatasetCall(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/dataset".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersDatasetValidateBeforeCall(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestRunWithParametersDataset(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestRunWithParametersDataset(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create multiple Test Runs with Parameter values from dataset.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParametersDataset(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersDatasetWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values from dataset.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersDatasetWithHttpInfo(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values from dataset. (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersDatasetAsync(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTestRunWithParametersRandomize */
    private com.squareup.okhttp.Call addTestRunWithParametersRandomizeCall(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/randomize".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersRandomizeValidateBeforeCall(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addTestRunWithParametersRandomize(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestRunWithParametersRandomize(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParametersRandomize(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersRandomizeWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersRandomizeWithHttpInfo(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type. (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersRandomizeAsync(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTestRun */
    private com.squareup.okhttp.Call createTestRunCall(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTestRunValidateBeforeCall(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTestRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTestRun(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTestRunCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Test Run
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return TestRunWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource createTestRun(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = createTestRunWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Creates a Test Run
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> createTestRunWithHttpInfo(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = createTestRunValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Test Run (asynchronously)
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTestRunAsync(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ApiCallback<TestRunWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTestRunValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteCommentById */
    private com.squareup.okhttp.Call deleteCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling deleteCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Comment of a Test Run
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<Object> resp = deleteCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Deletes a Comment of a Test Run
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Comment of a Test Run (asynchronously)
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTestRunById */
    private com.squareup.okhttp.Call deleteTestRunByIdCall(Long projectId, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testRunId" + "\\}", apiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestRunByIdValidateBeforeCall(Long projectId, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTestRunById(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling deleteTestRunById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestRunByIdCall(projectId, testRunId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Test Run
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message deleteTestRunById(Long projectId, Long testRunId) throws ApiException {
        ApiResponse<Message> resp = deleteTestRunByIdWithHttpInfo(projectId, testRunId);
        return resp.getData();
    }

    /**
     * Deletes a Test Run
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> deleteTestRunByIdWithHttpInfo(Long projectId, Long testRunId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestRunByIdValidateBeforeCall(projectId, testRunId, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Test Run (asynchronously)
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestRunByIdAsync(Long projectId, Long testRunId, final ApiCallback<Message> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestRunByIdValidateBeforeCall(projectId, testRunId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOf */
    private com.squareup.okhttp.Call getOfCall(Long projectId, Long parentId, String parentType, String expand, Boolean includeToscaProperties, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));
        if (includeToscaProperties != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeToscaProperties", includeToscaProperties));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfValidateBeforeCall(Long projectId, Long parentId, String parentType, String expand, Boolean includeToscaProperties, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getOf(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOfCall(projectId, parentId, parentType, expand, includeToscaProperties, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets multiple Test Runs
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return TestRunListResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunListResource getOf(Long projectId, Long parentId, String parentType, String expand, Boolean includeToscaProperties, Long page, Long pageSize) throws ApiException {
        ApiResponse<TestRunListResource> resp = getOfWithHttpInfo(projectId, parentId, parentType, expand, includeToscaProperties, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets multiple Test Runs
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;TestRunListResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunListResource> getOfWithHttpInfo(Long projectId, Long parentId, String parentType, String expand, Boolean includeToscaProperties, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getOfValidateBeforeCall(projectId, parentId, parentType, expand, includeToscaProperties, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<TestRunListResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Test Runs (asynchronously)
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfAsync(Long projectId, Long parentId, String parentType, String expand, Boolean includeToscaProperties, Long page, Long pageSize, final ApiCallback<TestRunListResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfValidateBeforeCall(projectId, parentId, parentType, expand, includeToscaProperties, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunListResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStatusValuable */
    private com.squareup.okhttp.Call getStatusValuableCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/execution-statuses".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatusValuableValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStatusValuable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStatusValuableCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Test Run statuses
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @return List&lt;StatusResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StatusResource> getStatusValuable(Long projectId) throws ApiException {
        ApiResponse<List<StatusResource>> resp = getStatusValuableWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Gets Test Run statuses
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @return ApiResponse&lt;List&lt;StatusResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StatusResource>> getStatusValuableWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStatusValuableValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<StatusResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Test Run statuses (asynchronously)
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatusValuableAsync(Long projectId, final ApiCallback<List<StatusResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatusValuableValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StatusResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSubhierachy */
    private com.squareup.okhttp.Call getSubhierachyCall(Long projectId, String parentType, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/subhierarchy".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubhierachyValidateBeforeCall(Long projectId, String parentType, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSubhierachy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubhierachyCall(projectId, parentType, parentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Sub Hierarchy
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @return AutomationObjectTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutomationObjectTree getSubhierachy(Long projectId, String parentType, Long parentId) throws ApiException {
        ApiResponse<AutomationObjectTree> resp = getSubhierachyWithHttpInfo(projectId, parentType, parentId);
        return resp.getData();
    }

    /**
     * Gets a Sub Hierarchy
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @return ApiResponse&lt;AutomationObjectTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutomationObjectTree> getSubhierachyWithHttpInfo(Long projectId, String parentType, Long parentId) throws ApiException {
        com.squareup.okhttp.Call call = getSubhierachyValidateBeforeCall(projectId, parentType, parentId, null, null);
        Type localVarReturnType = new TypeToken<AutomationObjectTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Sub Hierarchy (asynchronously)
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubhierachyAsync(Long projectId, String parentType, Long parentId, final ApiCallback<AutomationObjectTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubhierachyValidateBeforeCall(projectId, parentType, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutomationObjectTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestRunById */
    private com.squareup.okhttp.Call getTestRunByIdCall(Long projectId, Long testRunId, String expand, Boolean includeToscaProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testRunId" + "\\}", apiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));
        if (includeToscaProperties != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeToscaProperties", includeToscaProperties));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestRunByIdValidateBeforeCall(Long projectId, Long testRunId, String expand, Boolean includeToscaProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestRunById(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling getTestRunById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestRunByIdCall(projectId, testRunId, expand, includeToscaProperties, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Test Run
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @return TestRunWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource getTestRunById(Long projectId, Long testRunId, String expand, Boolean includeToscaProperties) throws ApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = getTestRunByIdWithHttpInfo(projectId, testRunId, expand, includeToscaProperties);
        return resp.getData();
    }

    /**
     * Gets a Test Run
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> getTestRunByIdWithHttpInfo(Long projectId, Long testRunId, String expand, Boolean includeToscaProperties) throws ApiException {
        com.squareup.okhttp.Call call = getTestRunByIdValidateBeforeCall(projectId, testRunId, expand, includeToscaProperties, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Run (asynchronously)
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @param includeToscaProperties By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties&#x3D;true to include them.   &lt;em&gt;(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestRunByIdAsync(Long projectId, Long testRunId, String expand, Boolean includeToscaProperties, final ApiCallback<TestRunWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestRunByIdValidateBeforeCall(projectId, testRunId, expand, includeToscaProperties, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestRunCommentById */
    private com.squareup.okhttp.Call getTestRunCommentByIdCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestRunCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestRunCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getTestRunCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getTestRunCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestRunCommentByIdCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Comment from a Test Run
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getTestRunCommentById(Long projectId, String idOrKey, Long commentId) throws ApiException {
        ApiResponse<CommentResource> resp = getTestRunCommentByIdWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment from a Test Run
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getTestRunCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws ApiException {
        com.squareup.okhttp.Call call = getTestRunCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment from a Test Run (asynchronously)
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestRunCommentByIdAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestRunCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTestRunComments */
    private com.squareup.okhttp.Call getTestRunCommentsCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestRunCommentsValidateBeforeCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTestRunComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling getTestRunComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestRunCommentsCall(projectId, idOrKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Comments of a Test Run
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @return PagedResourceCommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getTestRunComments(Long projectId, String idOrKey) throws ApiException {
        ApiResponse<PagedResourceCommentResource> resp = getTestRunCommentsWithHttpInfo(projectId, idOrKey);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Test Run
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getTestRunCommentsWithHttpInfo(Long projectId, String idOrKey) throws ApiException {
        com.squareup.okhttp.Call call = getTestRunCommentsValidateBeforeCall(projectId, idOrKey, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Test Run (asynchronously)
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestRunCommentsAsync(Long projectId, String idOrKey, final ApiCallback<PagedResourceCommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestRunCommentsValidateBeforeCall(projectId, idOrKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCommentById */
    private com.squareup.okhttp.Call updateCommentByIdCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "idOrKey" + "\\}", apiClient.escapeString(idOrKey.toString()))
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentByIdValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCommentById(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new ApiException("Missing the required parameter 'idOrKey' when calling updateCommentById(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateCommentById(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCommentById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCommentByIdCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Comment of a Test Run
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateCommentById(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        ApiResponse<CommentResource> resp = updateCommentByIdWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Test Run
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateCommentByIdWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Test Run (asynchronously)
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentByIdAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentByIdValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTestRunById */
    private com.squareup.okhttp.Call updateTestRunByIdCall(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "testRunId" + "\\}", apiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestRunByIdValidateBeforeCall(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTestRunById(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling updateTestRunById(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestRunById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestRunByIdCall(projectId, testRunId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Test Run
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return TestRunWithCustomFieldResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource updateTestRunById(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = updateTestRunByIdWithHttpInfo(projectId, testRunId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Updates a Test Run
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> updateTestRunByIdWithHttpInfo(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws ApiException {
        com.squareup.okhttp.Call call = updateTestRunByIdValidateBeforeCall(projectId, testRunId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Test Run (asynchronously)
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestRunByIdAsync(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ApiCallback<TestRunWithCustomFieldResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestRunByIdValidateBeforeCall(projectId, testRunId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

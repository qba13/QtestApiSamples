/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ProjectQueryParams;
import io.swagger.client.model.ProjectResource;
import io.swagger.client.model.ProjectUpdateResource;
import io.swagger.client.model.UserProfile;
import io.swagger.client.model.UserResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient apiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createProject */
    private com.squareup.okhttp.Call createProjectCall(ProjectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectValidateBeforeCall(ProjectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createProjectCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Project
     * To create a new Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Project created properties   &lt;em&gt;name:&lt;/em&gt; name of project  &lt;em&gt;description:&lt;/em&gt; description of project  &lt;em&gt;status_id:&lt;/em&gt; status of project  &lt;em&gt;start_date:&lt;/em&gt; start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date:&lt;/em&gt; end date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admins:&lt;/em&gt; list assigned admin of project  &lt;em&gt;template_id (optional):&lt;/em&gt; valid site template id of project. After creating a project, the valid site template filed will be applied for it  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects. (required)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectResource createProject(ProjectResource body) throws ApiException {
        ApiResponse<ProjectResource> resp = createProjectWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a Project
     * To create a new Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Project created properties   &lt;em&gt;name:&lt;/em&gt; name of project  &lt;em&gt;description:&lt;/em&gt; description of project  &lt;em&gt;status_id:&lt;/em&gt; status of project  &lt;em&gt;start_date:&lt;/em&gt; start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date:&lt;/em&gt; end date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admins:&lt;/em&gt; list assigned admin of project  &lt;em&gt;template_id (optional):&lt;/em&gt; valid site template id of project. After creating a project, the valid site template filed will be applied for it  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects. (required)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectResource> createProjectWithHttpInfo(ProjectResource body) throws ApiException {
        com.squareup.okhttp.Call call = createProjectValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Project (asynchronously)
     * To create a new Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Project created properties   &lt;em&gt;name:&lt;/em&gt; name of project  &lt;em&gt;description:&lt;/em&gt; description of project  &lt;em&gt;status_id:&lt;/em&gt; status of project  &lt;em&gt;start_date:&lt;/em&gt; start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date:&lt;/em&gt; end date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admins:&lt;/em&gt; list assigned admin of project  &lt;em&gt;template_id (optional):&lt;/em&gt; valid site template id of project. After creating a project, the valid site template filed will be applied for it  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectAsync(ProjectResource body, final ApiCallback<ProjectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCurrentProfile */
    private com.squareup.okhttp.Call getCurrentProfileCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/user-profiles/current".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentProfileValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCurrentProfile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCurrentProfileCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets current user Permissions in a Project
     * To retrieve your Permissions in a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile getCurrentProfile(Long projectId) throws ApiException {
        ApiResponse<UserProfile> resp = getCurrentProfileWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Gets current user Permissions in a Project
     * To retrieve your Permissions in a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> getCurrentProfileWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentProfileValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets current user Permissions in a Project (asynchronously)
     * To retrieve your Permissions in a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentProfileAsync(Long projectId, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentProfileValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProject */
    private com.squareup.okhttp.Call getProjectCall(Long projectId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectValidateBeforeCall(Long projectId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProjectCall(projectId, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Project
     * To retrieve a specific Project
     * @param projectId ID of the project (required)
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - include the your profile and permissions within the project in the response (optional)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectResource getProject(Long projectId, String expand) throws ApiException {
        ApiResponse<ProjectResource> resp = getProjectWithHttpInfo(projectId, expand);
        return resp.getData();
    }

    /**
     * Gets a Project
     * To retrieve a specific Project
     * @param projectId ID of the project (required)
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - include the your profile and permissions within the project in the response (optional)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectResource> getProjectWithHttpInfo(Long projectId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(projectId, expand, null, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Project (asynchronously)
     * To retrieve a specific Project
     * @param projectId ID of the project (required)
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - include the your profile and permissions within the project in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectAsync(Long projectId, String expand, final ApiCallback<ProjectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(projectId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProjects */
    private com.squareup.okhttp.Call getProjectsCall(String expand, Boolean assigned, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expand", expand));
        if (assigned != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assigned", assigned));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectsValidateBeforeCall(String expand, Boolean assigned, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getProjectsCall(expand, assigned, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets multiple Projects
     * To retrieve all Projects which the requested qTest  Manager account can access to  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - to include your profile and permissions in each project (optional)
     * @param assigned &lt;em&gt;assigned&#x3D;true&lt;/em&gt; - default value. Only the projects which the requested user has access to  &lt;em&gt;assigned&#x3D;false&lt;/em&gt; - Users with admin profile can use this value to retrieve all projects, regardless of having access (optional)
     * @param page By default, all projects are returned; but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return List&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectResource> getProjects(String expand, Boolean assigned, Long page, Long pageSize) throws ApiException {
        ApiResponse<List<ProjectResource>> resp = getProjectsWithHttpInfo(expand, assigned, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets multiple Projects
     * To retrieve all Projects which the requested qTest  Manager account can access to  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - to include your profile and permissions in each project (optional)
     * @param assigned &lt;em&gt;assigned&#x3D;true&lt;/em&gt; - default value. Only the projects which the requested user has access to  &lt;em&gt;assigned&#x3D;false&lt;/em&gt; - Users with admin profile can use this value to retrieve all projects, regardless of having access (optional)
     * @param page By default, all projects are returned; but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;List&lt;ProjectResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectResource>> getProjectsWithHttpInfo(String expand, Boolean assigned, Long page, Long pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getProjectsValidateBeforeCall(expand, assigned, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Projects (asynchronously)
     * To retrieve all Projects which the requested qTest  Manager account can access to  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - to include your profile and permissions in each project (optional)
     * @param assigned &lt;em&gt;assigned&#x3D;true&lt;/em&gt; - default value. Only the projects which the requested user has access to  &lt;em&gt;assigned&#x3D;false&lt;/em&gt; - Users with admin profile can use this value to retrieve all projects, regardless of having access (optional)
     * @param page By default, all projects are returned; but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectsAsync(String expand, Boolean assigned, Long page, Long pageSize, final ApiCallback<List<ProjectResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectsValidateBeforeCall(expand, assigned, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsers */
    private com.squareup.okhttp.Call getUsersCall(Long projectId, Boolean inactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "inactive", inactive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(Long projectId, Boolean inactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsersCall(projectId, inactive, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Users in a Project
     * To retrieve all members in a qTest Manager Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param projectId ID of the project (required)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @return List&lt;UserResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserResource> getUsers(Long projectId, Boolean inactive) throws ApiException {
        ApiResponse<List<UserResource>> resp = getUsersWithHttpInfo(projectId, inactive);
        return resp.getData();
    }

    /**
     * Gets all Users in a Project
     * To retrieve all members in a qTest Manager Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param projectId ID of the project (required)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @return ApiResponse&lt;List&lt;UserResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserResource>> getUsersWithHttpInfo(Long projectId, Boolean inactive) throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(projectId, inactive, null, null);
        Type localVarReturnType = new TypeToken<List<UserResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Users in a Project (asynchronously)
     * To retrieve all members in a qTest Manager Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param projectId ID of the project (required)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(Long projectId, Boolean inactive, final ApiCallback<List<UserResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(projectId, inactive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchProjects */
    private com.squareup.okhttp.Call searchProjectsCall(ProjectQueryParams body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchProjectsValidateBeforeCall(ProjectQueryParams body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchProjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchProjectsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for projects
     * 
     * @param body Project search condition properties   &lt;em&gt;uuid:&lt;/em&gt; list of uuid for searching (required)
     * @return List&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectResource> searchProjects(ProjectQueryParams body) throws ApiException {
        ApiResponse<List<ProjectResource>> resp = searchProjectsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search for projects
     * 
     * @param body Project search condition properties   &lt;em&gt;uuid:&lt;/em&gt; list of uuid for searching (required)
     * @return ApiResponse&lt;List&lt;ProjectResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectResource>> searchProjectsWithHttpInfo(ProjectQueryParams body) throws ApiException {
        com.squareup.okhttp.Call call = searchProjectsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for projects (asynchronously)
     * 
     * @param body Project search condition properties   &lt;em&gt;uuid:&lt;/em&gt; list of uuid for searching (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchProjectsAsync(ProjectQueryParams body, final ApiCallback<List<ProjectResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchProjectsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateProject */
    private com.squareup.okhttp.Call updateProjectCall(Long projectId, ProjectUpdateResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProjectValidateBeforeCall(Long projectId, ProjectUpdateResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProject(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateProjectCall(projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Project
     * 
     * @param projectId ID of the project (required)
     * @param body Project updated properties   &lt;em&gt;name (optional):&lt;/em&gt; name of project  &lt;em&gt;description (optional):&lt;/em&gt; description of project  &lt;em&gt;start_date (optional):&lt;/em&gt; Start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date (optional):&lt;/em&gt; End date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admin_ids (optional):&lt;/em&gt; list assigned admin ids of project  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects.  &lt;em&gt;template_id (optional):&lt;/em&gt; site template id of project. When changing site template id, the project will be removed from old site template id and the new site template will be applied to it. (required)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectResource updateProject(Long projectId, ProjectUpdateResource body) throws ApiException {
        ApiResponse<ProjectResource> resp = updateProjectWithHttpInfo(projectId, body);
        return resp.getData();
    }

    /**
     * Updates a Project
     * 
     * @param projectId ID of the project (required)
     * @param body Project updated properties   &lt;em&gt;name (optional):&lt;/em&gt; name of project  &lt;em&gt;description (optional):&lt;/em&gt; description of project  &lt;em&gt;start_date (optional):&lt;/em&gt; Start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date (optional):&lt;/em&gt; End date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admin_ids (optional):&lt;/em&gt; list assigned admin ids of project  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects.  &lt;em&gt;template_id (optional):&lt;/em&gt; site template id of project. When changing site template id, the project will be removed from old site template id and the new site template will be applied to it. (required)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectResource> updateProjectWithHttpInfo(Long projectId, ProjectUpdateResource body) throws ApiException {
        com.squareup.okhttp.Call call = updateProjectValidateBeforeCall(projectId, body, null, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Project (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param body Project updated properties   &lt;em&gt;name (optional):&lt;/em&gt; name of project  &lt;em&gt;description (optional):&lt;/em&gt; description of project  &lt;em&gt;start_date (optional):&lt;/em&gt; Start date of project, eg: 2019-06-17T05:09:13.178Z  &lt;em&gt;end_date (optional):&lt;/em&gt; End date of project, eg: 2019-06-27T05:09:13.178Z  &lt;em&gt;admin_ids (optional):&lt;/em&gt; list assigned admin ids of project  &lt;em&gt;uuid (optional):&lt;/em&gt; uuid of project. User can provide any string value for uuid, then they can used it for searching projects.  &lt;em&gt;template_id (optional):&lt;/em&gt; site template id of project. When changing site template id, the project will be removed from old site template id and the new site template will be applied to it. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProjectAsync(Long projectId, ProjectUpdateResource body, final ApiCallback<ProjectResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProjectValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

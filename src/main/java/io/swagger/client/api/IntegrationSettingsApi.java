/*
 * qTest Manager API Version 8.6 - 10.5
 * qTest Manager API Version 8.6 - 10.5
 *
 * OpenAPI spec version: 8.6 - 10.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.IntegrationAutoFillMappingVM;
import io.swagger.client.model.IntegrationConnection;
import io.swagger.client.model.IntegrationConnectionVM;
import io.swagger.client.model.IntegrationFieldMapVM;
import io.swagger.client.model.IntegrationReleaseConfigurationVM;
import io.swagger.client.model.IntegrationReleaseMappingResponse;
import io.swagger.client.model.NewIntegrationConnectionInfo;
import io.swagger.client.model.QueueProcessingResponse;
import io.swagger.client.model.QueueProcessingResponseFetchDataVM;
import io.swagger.client.model.RequirementMapping;
import io.swagger.client.model.TokenSecretVerifierHolder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationSettingsApi {
    private ApiClient apiClient;

    public IntegrationSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationSettingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addNewConnection */
    private com.squareup.okhttp.Call addNewConnectionCall(Long projectId, IntegrationConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewConnectionValidateBeforeCall(Long projectId, IntegrationConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addNewConnection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewConnection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewConnectionCall(projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new Jira connection
     * Add a new Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;external_system (required):&lt;/em&gt; Input &lt;em&gt;Jira&lt;/em&gt;  &lt;em&gt;connection_name (required):&lt;/em&gt; Name of connection  &lt;em&gt;server_url (required):&lt;/em&gt; your Jira server URL  &lt;em&gt;web_url:&lt;/em&gt; Your Jira web URL (for Jira server only)  &lt;em&gt;authentication_type (required):&lt;/em&gt; Input &lt;em&gt;Token&lt;/em&gt; if you are using password or API token, or &lt;em&gt;OAuth&lt;/em&gt; if you are using Jira OAuth for authentication  &lt;em&gt;username:&lt;/em&gt; If &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;, then input your Jira username. If &lt;em&gt;authentication_type&#x3D;OAuth&lt;/em&gt;, then input &lt;em&gt;apikey&lt;/em&gt;  &lt;em&gt;password:&lt;/em&gt; Input your Jira password or API token (only required if &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;)  &lt;em&gt;jiraToken, jiraSecret&lt;/em&gt; and &lt;em&gt;jiraVerifier&lt;/em&gt; these are required if authentication_type&#x3D;Oauth. You will need to use our API to &lt;em&gt;Get OAuth Authorize URL&lt;/em&gt; described below to retrieve values for these fields. (required)
     * @return NewIntegrationConnectionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewIntegrationConnectionInfo addNewConnection(Long projectId, IntegrationConnection body) throws ApiException {
        ApiResponse<NewIntegrationConnectionInfo> resp = addNewConnectionWithHttpInfo(projectId, body);
        return resp.getData();
    }

    /**
     * Add a new Jira connection
     * Add a new Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;external_system (required):&lt;/em&gt; Input &lt;em&gt;Jira&lt;/em&gt;  &lt;em&gt;connection_name (required):&lt;/em&gt; Name of connection  &lt;em&gt;server_url (required):&lt;/em&gt; your Jira server URL  &lt;em&gt;web_url:&lt;/em&gt; Your Jira web URL (for Jira server only)  &lt;em&gt;authentication_type (required):&lt;/em&gt; Input &lt;em&gt;Token&lt;/em&gt; if you are using password or API token, or &lt;em&gt;OAuth&lt;/em&gt; if you are using Jira OAuth for authentication  &lt;em&gt;username:&lt;/em&gt; If &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;, then input your Jira username. If &lt;em&gt;authentication_type&#x3D;OAuth&lt;/em&gt;, then input &lt;em&gt;apikey&lt;/em&gt;  &lt;em&gt;password:&lt;/em&gt; Input your Jira password or API token (only required if &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;)  &lt;em&gt;jiraToken, jiraSecret&lt;/em&gt; and &lt;em&gt;jiraVerifier&lt;/em&gt; these are required if authentication_type&#x3D;Oauth. You will need to use our API to &lt;em&gt;Get OAuth Authorize URL&lt;/em&gt; described below to retrieve values for these fields. (required)
     * @return ApiResponse&lt;NewIntegrationConnectionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewIntegrationConnectionInfo> addNewConnectionWithHttpInfo(Long projectId, IntegrationConnection body) throws ApiException {
        com.squareup.okhttp.Call call = addNewConnectionValidateBeforeCall(projectId, body, null, null);
        Type localVarReturnType = new TypeToken<NewIntegrationConnectionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new Jira connection (asynchronously)
     * Add a new Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;external_system (required):&lt;/em&gt; Input &lt;em&gt;Jira&lt;/em&gt;  &lt;em&gt;connection_name (required):&lt;/em&gt; Name of connection  &lt;em&gt;server_url (required):&lt;/em&gt; your Jira server URL  &lt;em&gt;web_url:&lt;/em&gt; Your Jira web URL (for Jira server only)  &lt;em&gt;authentication_type (required):&lt;/em&gt; Input &lt;em&gt;Token&lt;/em&gt; if you are using password or API token, or &lt;em&gt;OAuth&lt;/em&gt; if you are using Jira OAuth for authentication  &lt;em&gt;username:&lt;/em&gt; If &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;, then input your Jira username. If &lt;em&gt;authentication_type&#x3D;OAuth&lt;/em&gt;, then input &lt;em&gt;apikey&lt;/em&gt;  &lt;em&gt;password:&lt;/em&gt; Input your Jira password or API token (only required if &lt;em&gt;authentication_type&#x3D;Token&lt;/em&gt;)  &lt;em&gt;jiraToken, jiraSecret&lt;/em&gt; and &lt;em&gt;jiraVerifier&lt;/em&gt; these are required if authentication_type&#x3D;Oauth. You will need to use our API to &lt;em&gt;Get OAuth Authorize URL&lt;/em&gt; described below to retrieve values for these fields. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewConnectionAsync(Long projectId, IntegrationConnection body, final ApiCallback<NewIntegrationConnectionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewConnectionValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewIntegrationConnectionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addNewDefectMapping */
    private com.squareup.okhttp.Call addNewDefectMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewDefectMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addNewDefectMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling addNewDefectMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling addNewDefectMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling addNewDefectMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewDefectMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a defect mapping to a Jira connection
     * Add a defect mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (required)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type only (required)
     * @return IntegrationAutoFillMappingVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationAutoFillMappingVM addNewDefectMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<IntegrationAutoFillMappingVM> resp = addNewDefectMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Add a defect mapping to a Jira connection
     * Add a defect mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (required)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type only (required)
     * @return ApiResponse&lt;IntegrationAutoFillMappingVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationAutoFillMappingVM> addNewDefectMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addNewDefectMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a defect mapping to a Jira connection (asynchronously)
     * Add a defect mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (required)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type only (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewDefectMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<IntegrationAutoFillMappingVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewDefectMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addNewReleaseMapping */
    private com.squareup.okhttp.Call addNewReleaseMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewReleaseMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addNewReleaseMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling addNewReleaseMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling addNewReleaseMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling addNewReleaseMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewReleaseMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new Jira release mapping to a Jira connection
     * Add a new Jira release mapping to a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to get its project IDs (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (required)
     * @return IntegrationReleaseMappingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationReleaseMappingResponse addNewReleaseMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<IntegrationReleaseMappingResponse> resp = addNewReleaseMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Add a new Jira release mapping to a Jira connection
     * Add a new Jira release mapping to a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to get its project IDs (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (required)
     * @return ApiResponse&lt;IntegrationReleaseMappingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationReleaseMappingResponse> addNewReleaseMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addNewReleaseMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<IntegrationReleaseMappingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new Jira release mapping to a Jira connection (asynchronously)
     * Add a new Jira release mapping to a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to get its project IDs (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewReleaseMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<IntegrationReleaseMappingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewReleaseMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationReleaseMappingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addNewRequirementMapping */
    private com.squareup.okhttp.Call addNewRequirementMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewRequirementMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addNewRequirementMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling addNewRequirementMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling addNewRequirementMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling addNewRequirementMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewRequirementMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a requirement mapping to a Jira connection
     * Add a requirement mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to retrieve its project IDs (required)
     * @param externalIssueTypeId ID of a Jira issue type. You will need to make API calls to Jira to retrieve its issue type IDs (required)
     * @return RequirementMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequirementMapping addNewRequirementMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<RequirementMapping> resp = addNewRequirementMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Add a requirement mapping to a Jira connection
     * Add a requirement mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to retrieve its project IDs (required)
     * @param externalIssueTypeId ID of a Jira issue type. You will need to make API calls to Jira to retrieve its issue type IDs (required)
     * @return ApiResponse&lt;RequirementMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequirementMapping> addNewRequirementMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addNewRequirementMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<RequirementMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a requirement mapping to a Jira connection (asynchronously)
     * Add a requirement mapping to a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. You will need to make API calls to Jira to retrieve its project IDs (required)
     * @param externalIssueTypeId ID of a Jira issue type. You will need to make API calls to Jira to retrieve its issue type IDs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewRequirementMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<RequirementMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewRequirementMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequirementMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for configurePopulatingJiraUnlinkedDefects */
    private com.squareup.okhttp.Call configurePopulatingJiraUnlinkedDefectsCall(Long projectId, Long connectionId, String storeUnlinkedDefects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeUnlinkedDefects != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeUnlinkedDefects", storeUnlinkedDefects));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configurePopulatingJiraUnlinkedDefectsValidateBeforeCall(Long projectId, Long connectionId, String storeUnlinkedDefects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling configurePopulatingJiraUnlinkedDefects(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling configurePopulatingJiraUnlinkedDefects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configurePopulatingJiraUnlinkedDefectsCall(projectId, connectionId, storeUnlinkedDefects, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable populating Jira Unlinked Defects of a Jira connection
     * Enable or disable populating Jira Unlinked Defects of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param storeUnlinkedDefects Input &lt;em&gt;true&lt;/em&gt; to populate unlinked Jira Defects, or &lt;em&gt;false&lt;/em&gt; to disable this feature (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configurePopulatingJiraUnlinkedDefects(Long projectId, Long connectionId, String storeUnlinkedDefects) throws ApiException {
        configurePopulatingJiraUnlinkedDefectsWithHttpInfo(projectId, connectionId, storeUnlinkedDefects);
    }

    /**
     * Enable or disable populating Jira Unlinked Defects of a Jira connection
     * Enable or disable populating Jira Unlinked Defects of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param storeUnlinkedDefects Input &lt;em&gt;true&lt;/em&gt; to populate unlinked Jira Defects, or &lt;em&gt;false&lt;/em&gt; to disable this feature (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configurePopulatingJiraUnlinkedDefectsWithHttpInfo(Long projectId, Long connectionId, String storeUnlinkedDefects) throws ApiException {
        com.squareup.okhttp.Call call = configurePopulatingJiraUnlinkedDefectsValidateBeforeCall(projectId, connectionId, storeUnlinkedDefects, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable or disable populating Jira Unlinked Defects of a Jira connection (asynchronously)
     * Enable or disable populating Jira Unlinked Defects of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param storeUnlinkedDefects Input &lt;em&gt;true&lt;/em&gt; to populate unlinked Jira Defects, or &lt;em&gt;false&lt;/em&gt; to disable this feature (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configurePopulatingJiraUnlinkedDefectsAsync(Long projectId, Long connectionId, String storeUnlinkedDefects, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configurePopulatingJiraUnlinkedDefectsValidateBeforeCall(projectId, connectionId, storeUnlinkedDefects, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for configureReleaseMapping */
    private com.squareup.okhttp.Call configureReleaseMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationReleaseConfigurationVM body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureReleaseMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationReleaseConfigurationVM body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling configureReleaseMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling configureReleaseMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling configureReleaseMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling configureReleaseMapping(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling configureReleaseMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureReleaseMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Release Mapping of a Jira connection
     * To configure a Release Mapping of a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;)   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;data_retrieval_options:&lt;/em&gt; If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;released, unreleased&lt;/strong&gt;. If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;active, future, completed&lt;/strong&gt;  &lt;em&gt;auto_update_release_scope:&lt;/em&gt; Select to automatically update scope of imported Releases in qTest. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (required)
     * @return IntegrationReleaseMappingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationReleaseMappingResponse configureReleaseMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationReleaseConfigurationVM body) throws ApiException {
        ApiResponse<IntegrationReleaseMappingResponse> resp = configureReleaseMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId, body);
        return resp.getData();
    }

    /**
     * Update a Release Mapping of a Jira connection
     * To configure a Release Mapping of a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;)   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;data_retrieval_options:&lt;/em&gt; If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;released, unreleased&lt;/strong&gt;. If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;active, future, completed&lt;/strong&gt;  &lt;em&gt;auto_update_release_scope:&lt;/em&gt; Select to automatically update scope of imported Releases in qTest. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (required)
     * @return ApiResponse&lt;IntegrationReleaseMappingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationReleaseMappingResponse> configureReleaseMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationReleaseConfigurationVM body) throws ApiException {
        com.squareup.okhttp.Call call = configureReleaseMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<IntegrationReleaseMappingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Release Mapping of a Jira connection (asynchronously)
     * To configure a Release Mapping of a Jira connection.   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;)   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;data_retrieval_options:&lt;/em&gt; If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;released, unreleased&lt;/strong&gt;. If &lt;em&gt;externalIssueTypeId&#x3D;fixVersions&lt;/em&gt;, valid values include: &lt;strong&gt;active, future, completed&lt;/strong&gt;  &lt;em&gt;auto_update_release_scope:&lt;/em&gt; Select to automatically update scope of imported Releases in qTest. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureReleaseMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationReleaseConfigurationVM body, final ApiCallback<IntegrationReleaseMappingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureReleaseMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationReleaseMappingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for configureRequirementMapping */
    private com.squareup.okhttp.Call configureRequirementMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, RequirementMapping body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureRequirementMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, RequirementMapping body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling configureRequirementMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling configureRequirementMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling configureRequirementMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling configureRequirementMapping(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling configureRequirementMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureRequirementMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a requirement mapping of a Jira connection
     * To configure a requirement mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;external_filter:&lt;/em&gt; ID of a Jira filter whose Jira issues will be imported to qTest as Requirements.  &lt;em&gt;external_field_1_id&lt;/em&gt; and &lt;em&gt;external_field_2_id:&lt;/em&gt; &lt;strong&gt;Jira keys&lt;/strong&gt; of 2 Jira fields that are used to organize imported Requirements  &lt;em&gt;active_external_fields:&lt;/em&gt; &lt;em&gt;Jira keys&lt;/em&gt; of Jira fields that will show up in qTest requirement page (Jira read-only properties panel). You can specify a list of Jira fields, &lt;em&gt;separated by comma without a following space&lt;/em&gt; (required)
     * @return RequirementMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequirementMapping configureRequirementMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, RequirementMapping body) throws ApiException {
        ApiResponse<RequirementMapping> resp = configureRequirementMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId, body);
        return resp.getData();
    }

    /**
     * Update a requirement mapping of a Jira connection
     * To configure a requirement mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;external_filter:&lt;/em&gt; ID of a Jira filter whose Jira issues will be imported to qTest as Requirements.  &lt;em&gt;external_field_1_id&lt;/em&gt; and &lt;em&gt;external_field_2_id:&lt;/em&gt; &lt;strong&gt;Jira keys&lt;/strong&gt; of 2 Jira fields that are used to organize imported Requirements  &lt;em&gt;active_external_fields:&lt;/em&gt; &lt;em&gt;Jira keys&lt;/em&gt; of Jira fields that will show up in qTest requirement page (Jira read-only properties panel). You can specify a list of Jira fields, &lt;em&gt;separated by comma without a following space&lt;/em&gt; (required)
     * @return ApiResponse&lt;RequirementMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequirementMapping> configureRequirementMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, RequirementMapping body) throws ApiException {
        com.squareup.okhttp.Call call = configureRequirementMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<RequirementMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a requirement mapping of a Jira connection (asynchronously)
     * To configure a requirement mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
     * @param body &lt;em&gt;external_filter:&lt;/em&gt; ID of a Jira filter whose Jira issues will be imported to qTest as Requirements.  &lt;em&gt;external_field_1_id&lt;/em&gt; and &lt;em&gt;external_field_2_id:&lt;/em&gt; &lt;strong&gt;Jira keys&lt;/strong&gt; of 2 Jira fields that are used to organize imported Requirements  &lt;em&gt;active_external_fields:&lt;/em&gt; &lt;em&gt;Jira keys&lt;/em&gt; of Jira fields that will show up in qTest requirement page (Jira read-only properties panel). You can specify a list of Jira fields, &lt;em&gt;separated by comma without a following space&lt;/em&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureRequirementMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, RequirementMapping body, final ApiCallback<RequirementMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureRequirementMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequirementMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteConnection */
    private com.squareup.okhttp.Call deleteConnectionCall(Long projectId, Long connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConnectionValidateBeforeCall(Long projectId, Long connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteConnection(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling deleteConnection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteConnectionCall(projectId, connectionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Jira connection
     * Delete a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteConnection(Long projectId, Long connectionId) throws ApiException {
        deleteConnectionWithHttpInfo(projectId, connectionId);
    }

    /**
     * Delete a Jira connection
     * Delete a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteConnectionWithHttpInfo(Long projectId, Long connectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteConnectionValidateBeforeCall(projectId, connectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Jira connection (asynchronously)
     * Delete a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConnectionAsync(Long projectId, Long connectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConnectionValidateBeforeCall(projectId, connectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAuthorizeURL */
    private com.squareup.okhttp.Call getAuthorizeURLCall(Long projectId, String serverUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/oauthAuthorizeURL".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (serverUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "serverUrl", serverUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthorizeURLValidateBeforeCall(Long projectId, String serverUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAuthorizeURL(Async)");
        }
        
        // verify the required parameter 'serverUrl' is set
        if (serverUrl == null) {
            throw new ApiException("Missing the required parameter 'serverUrl' when calling getAuthorizeURL(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAuthorizeURLCall(projectId, serverUrl, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OAuth Authorize URL
     * OAuth Authorize URL (for Jira Server or DC only).  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId this must be 0 (zero) (required)
     * @param serverUrl your Jira&#39;s Server URL (required)
     * @return TokenSecretVerifierHolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenSecretVerifierHolder getAuthorizeURL(Long projectId, String serverUrl) throws ApiException {
        ApiResponse<TokenSecretVerifierHolder> resp = getAuthorizeURLWithHttpInfo(projectId, serverUrl);
        return resp.getData();
    }

    /**
     * OAuth Authorize URL
     * OAuth Authorize URL (for Jira Server or DC only).  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId this must be 0 (zero) (required)
     * @param serverUrl your Jira&#39;s Server URL (required)
     * @return ApiResponse&lt;TokenSecretVerifierHolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenSecretVerifierHolder> getAuthorizeURLWithHttpInfo(Long projectId, String serverUrl) throws ApiException {
        com.squareup.okhttp.Call call = getAuthorizeURLValidateBeforeCall(projectId, serverUrl, null, null);
        Type localVarReturnType = new TypeToken<TokenSecretVerifierHolder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth Authorize URL (asynchronously)
     * OAuth Authorize URL (for Jira Server or DC only).  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId this must be 0 (zero) (required)
     * @param serverUrl your Jira&#39;s Server URL (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthorizeURLAsync(Long projectId, String serverUrl, final ApiCallback<TokenSecretVerifierHolder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthorizeURLValidateBeforeCall(projectId, serverUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenSecretVerifierHolder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConnections */
    private com.squareup.okhttp.Call getConnectionsCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectionsValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getConnections(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConnectionsCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Jira connections of a project
     * Get all Jira connections of a project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @return IntegrationConnectionVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationConnectionVM getConnections(Long projectId) throws ApiException {
        ApiResponse<IntegrationConnectionVM> resp = getConnectionsWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get all Jira connections of a project
     * Get all Jira connections of a project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @return ApiResponse&lt;IntegrationConnectionVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationConnectionVM> getConnectionsWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionsValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<IntegrationConnectionVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Jira connections of a project (asynchronously)
     * Get all Jira connections of a project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionsAsync(Long projectId, final ApiCallback<IntegrationConnectionVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionsValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationConnectionVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDefectMappings */
    private com.squareup.okhttp.Call getDefectMappingsCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectMappingsValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDefectMappings(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getDefectMappings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDefectMappingsCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Jira defect mappings of a Jira connection
     * Get Jira defect mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type (optional)
     * @return IntegrationAutoFillMappingVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationAutoFillMappingVM getDefectMappings(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<IntegrationAutoFillMappingVM> resp = getDefectMappingsWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Get Jira defect mappings of a Jira connection
     * Get Jira defect mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type (optional)
     * @return ApiResponse&lt;IntegrationAutoFillMappingVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationAutoFillMappingVM> getDefectMappingsWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getDefectMappingsValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Jira defect mappings of a Jira connection (asynchronously)
     * Get Jira defect mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectMappingsAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<IntegrationAutoFillMappingVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectMappingsValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReleaseMappings */
    private com.squareup.okhttp.Call getReleaseMappingsCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReleaseMappingsValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getReleaseMappings(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getReleaseMappings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReleaseMappingsCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Jira release mappings of a Jira connection
     * Get Jira release mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId Valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (optional)
     * @return List&lt;IntegrationReleaseMappingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IntegrationReleaseMappingResponse> getReleaseMappings(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<List<IntegrationReleaseMappingResponse>> resp = getReleaseMappingsWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Get Jira release mappings of a Jira connection
     * Get Jira release mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId Valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (optional)
     * @return ApiResponse&lt;List&lt;IntegrationReleaseMappingResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IntegrationReleaseMappingResponse>> getReleaseMappingsWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getReleaseMappingsValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<List<IntegrationReleaseMappingResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Jira release mappings of a Jira connection (asynchronously)
     * Get Jira release mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project. Use this to retrieve mappings with this Jira project only (optional)
     * @param externalIssueTypeId Valid values include: fixVersions, Sprint (&lt;strong&gt;case-sensitive&lt;/strong&gt;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReleaseMappingsAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<List<IntegrationReleaseMappingResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReleaseMappingsValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IntegrationReleaseMappingResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for refreshFieldSettings */
    private com.squareup.okhttp.Call refreshFieldSettingsCall(Long projectId, Long connectionId, String artifact, Long mappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/refreshFieldSettings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (artifact != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "artifact", artifact));
        if (mappingId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mappingId", mappingId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refreshFieldSettingsValidateBeforeCall(Long projectId, Long connectionId, String artifact, Long mappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling refreshFieldSettings(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling refreshFieldSettings(Async)");
        }
        
        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling refreshFieldSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = refreshFieldSettingsCall(projectId, connectionId, artifact, mappingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Trigger retrieving latest field settings from a JIRA connection
     * Trigger retrieving the latest Defects/Requirements field settings from Jira  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Single value. Valid values include: &lt;b&gt;Defects, Requirements&lt;/b&gt; (required)
     * @param mappingId ID of the mapping. Only required if &lt;em&gt;artifact&#x3D;Requirements&lt;em&gt; (optional)
     * @return List&lt;IntegrationFieldMapVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IntegrationFieldMapVM> refreshFieldSettings(Long projectId, Long connectionId, String artifact, Long mappingId) throws ApiException {
        ApiResponse<List<IntegrationFieldMapVM>> resp = refreshFieldSettingsWithHttpInfo(projectId, connectionId, artifact, mappingId);
        return resp.getData();
    }

    /**
     * Trigger retrieving latest field settings from a JIRA connection
     * Trigger retrieving the latest Defects/Requirements field settings from Jira  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Single value. Valid values include: &lt;b&gt;Defects, Requirements&lt;/b&gt; (required)
     * @param mappingId ID of the mapping. Only required if &lt;em&gt;artifact&#x3D;Requirements&lt;em&gt; (optional)
     * @return ApiResponse&lt;List&lt;IntegrationFieldMapVM&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IntegrationFieldMapVM>> refreshFieldSettingsWithHttpInfo(Long projectId, Long connectionId, String artifact, Long mappingId) throws ApiException {
        com.squareup.okhttp.Call call = refreshFieldSettingsValidateBeforeCall(projectId, connectionId, artifact, mappingId, null, null);
        Type localVarReturnType = new TypeToken<List<IntegrationFieldMapVM>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger retrieving latest field settings from a JIRA connection (asynchronously)
     * Trigger retrieving the latest Defects/Requirements field settings from Jira  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Single value. Valid values include: &lt;b&gt;Defects, Requirements&lt;/b&gt; (required)
     * @param mappingId ID of the mapping. Only required if &lt;em&gt;artifact&#x3D;Requirements&lt;em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshFieldSettingsAsync(Long projectId, Long connectionId, String artifact, Long mappingId, final ApiCallback<List<IntegrationFieldMapVM>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refreshFieldSettingsValidateBeforeCall(projectId, connectionId, artifact, mappingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IntegrationFieldMapVM>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeMapping */
    private com.squareup.okhttp.Call removeMappingCall(Long projectId, Long connectionId, String artifact, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/{artifact}/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()))
        .replaceAll("\\{" + "artifact" + "\\}", apiClient.escapeString(artifact.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMappingValidateBeforeCall(Long projectId, Long connectionId, String artifact, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling removeMapping(Async)");
        }
        
        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling removeMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling removeMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling removeMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeMappingCall(projectId, connectionId, artifact, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a Mapping of a Jira connection
     * Remove a Mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values can be: &lt;b&gt;Defect, Requirement, Release&lt;/b&gt; (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type.    externalProjectId and externalIssueTypeId are used to identify a mapping (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeMapping(Long projectId, Long connectionId, String artifact, String externalProjectId, String externalIssueTypeId) throws ApiException {
        removeMappingWithHttpInfo(projectId, connectionId, artifact, externalProjectId, externalIssueTypeId);
    }

    /**
     * Remove a Mapping of a Jira connection
     * Remove a Mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values can be: &lt;b&gt;Defect, Requirement, Release&lt;/b&gt; (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type.    externalProjectId and externalIssueTypeId are used to identify a mapping (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeMappingWithHttpInfo(Long projectId, Long connectionId, String artifact, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = removeMappingValidateBeforeCall(projectId, connectionId, artifact, externalProjectId, externalIssueTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a Mapping of a Jira connection (asynchronously)
     * Remove a Mapping of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values can be: &lt;b&gt;Defect, Requirement, Release&lt;/b&gt; (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of a Jira issue type.    externalProjectId and externalIssueTypeId are used to identify a mapping (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMappingAsync(Long projectId, Long connectionId, String artifact, String externalProjectId, String externalIssueTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMappingValidateBeforeCall(projectId, connectionId, artifact, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveAllRequirementMappingsOfConnection */
    private com.squareup.okhttp.Call retrieveAllRequirementMappingsOfConnectionCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAllRequirementMappingsOfConnectionValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling retrieveAllRequirementMappingsOfConnection(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling retrieveAllRequirementMappingsOfConnection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveAllRequirementMappingsOfConnectionCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get requirement mappings of a Jira connection
     * Get requirement mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of the Jira project. You will need to make API calls to Jira to get its project IDs (optional)
     * @param externalIssueTypeId ID of the Jira issue type. You will need to make API calls to Jira to get its issue type IDs (optional)
     * @return List&lt;RequirementMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RequirementMapping> retrieveAllRequirementMappingsOfConnection(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        ApiResponse<List<RequirementMapping>> resp = retrieveAllRequirementMappingsOfConnectionWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId);
        return resp.getData();
    }

    /**
     * Get requirement mappings of a Jira connection
     * Get requirement mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of the Jira project. You will need to make API calls to Jira to get its project IDs (optional)
     * @param externalIssueTypeId ID of the Jira issue type. You will need to make API calls to Jira to get its issue type IDs (optional)
     * @return ApiResponse&lt;List&lt;RequirementMapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RequirementMapping>> retrieveAllRequirementMappingsOfConnectionWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAllRequirementMappingsOfConnectionValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, null, null);
        Type localVarReturnType = new TypeToken<List<RequirementMapping>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get requirement mappings of a Jira connection (asynchronously)
     * Get requirement mappings of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of the Jira project. You will need to make API calls to Jira to get its project IDs (optional)
     * @param externalIssueTypeId ID of the Jira issue type. You will need to make API calls to Jira to get its issue type IDs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAllRequirementMappingsOfConnectionAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, final ApiCallback<List<RequirementMapping>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAllRequirementMappingsOfConnectionValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RequirementMapping>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for toggleReleaseIntegration */
    private com.squareup.okhttp.Call toggleReleaseIntegrationCall(Long projectId, Long connectionId, String active, String autoFilterTestRun, String mergeDuplicatedFixVersions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "active", active));
        if (autoFilterTestRun != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "autoFilterTestRun", autoFilterTestRun));
        if (mergeDuplicatedFixVersions != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mergeDuplicatedFixVersions", mergeDuplicatedFixVersions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call toggleReleaseIntegrationValidateBeforeCall(Long projectId, Long connectionId, String active, String autoFilterTestRun, String mergeDuplicatedFixVersions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling toggleReleaseIntegration(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling toggleReleaseIntegration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = toggleReleaseIntegrationCall(projectId, connectionId, active, autoFilterTestRun, mergeDuplicatedFixVersions, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable Release Integration feature of a Jira connection
     * Enable or disable Release Integration feature  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable Release integration, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @param autoFilterTestRun select or deselect the checkbox &lt;em&gt;Auto-filter Test Runs on Jira iframe to match Fix Version/Sprint of Jira issue&lt;/em&gt;. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @param mergeDuplicatedFixVersions select or deselect the checkbox Merge all Jira Fix versions with existing qTest Releases that have the same name into a single Release and link to all Jira projects. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void toggleReleaseIntegration(Long projectId, Long connectionId, String active, String autoFilterTestRun, String mergeDuplicatedFixVersions) throws ApiException {
        toggleReleaseIntegrationWithHttpInfo(projectId, connectionId, active, autoFilterTestRun, mergeDuplicatedFixVersions);
    }

    /**
     * Enable or disable Release Integration feature of a Jira connection
     * Enable or disable Release Integration feature  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable Release integration, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @param autoFilterTestRun select or deselect the checkbox &lt;em&gt;Auto-filter Test Runs on Jira iframe to match Fix Version/Sprint of Jira issue&lt;/em&gt;. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @param mergeDuplicatedFixVersions select or deselect the checkbox Merge all Jira Fix versions with existing qTest Releases that have the same name into a single Release and link to all Jira projects. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> toggleReleaseIntegrationWithHttpInfo(Long projectId, Long connectionId, String active, String autoFilterTestRun, String mergeDuplicatedFixVersions) throws ApiException {
        com.squareup.okhttp.Call call = toggleReleaseIntegrationValidateBeforeCall(projectId, connectionId, active, autoFilterTestRun, mergeDuplicatedFixVersions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable or disable Release Integration feature of a Jira connection (asynchronously)
     * Enable or disable Release Integration feature  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable Release integration, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @param autoFilterTestRun select or deselect the checkbox &lt;em&gt;Auto-filter Test Runs on Jira iframe to match Fix Version/Sprint of Jira issue&lt;/em&gt;. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @param mergeDuplicatedFixVersions select or deselect the checkbox Merge all Jira Fix versions with existing qTest Releases that have the same name into a single Release and link to all Jira projects. Valid values include: &lt;b&gt;True, False&lt;/b&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call toggleReleaseIntegrationAsync(Long projectId, Long connectionId, String active, String autoFilterTestRun, String mergeDuplicatedFixVersions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = toggleReleaseIntegrationValidateBeforeCall(projectId, connectionId, active, autoFilterTestRun, mergeDuplicatedFixVersions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for toggleRequirementIntegration */
    private com.squareup.okhttp.Call toggleRequirementIntegrationCall(Long projectId, Long connectionId, String active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "active", active));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call toggleRequirementIntegrationValidateBeforeCall(Long projectId, Long connectionId, String active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling toggleRequirementIntegration(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling toggleRequirementIntegration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = toggleRequirementIntegrationCall(projectId, connectionId, active, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable a Requirement Integration feature of a Jira connection
     * Enable or disable a Requirement Integration feature of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable the feature, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void toggleRequirementIntegration(Long projectId, Long connectionId, String active) throws ApiException {
        toggleRequirementIntegrationWithHttpInfo(projectId, connectionId, active);
    }

    /**
     * Enable or disable a Requirement Integration feature of a Jira connection
     * Enable or disable a Requirement Integration feature of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable the feature, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> toggleRequirementIntegrationWithHttpInfo(Long projectId, Long connectionId, String active) throws ApiException {
        com.squareup.okhttp.Call call = toggleRequirementIntegrationValidateBeforeCall(projectId, connectionId, active, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable or disable a Requirement Integration feature of a Jira connection (asynchronously)
     * Enable or disable a Requirement Integration feature of a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to enable the feature, or &lt;em&gt;false&lt;/em&gt; to disable it (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call toggleRequirementIntegrationAsync(Long projectId, Long connectionId, String active, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = toggleRequirementIntegrationValidateBeforeCall(projectId, connectionId, active, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for triggerRetrievingDataForConnection */
    private com.squareup.okhttp.Call triggerRetrievingDataForConnectionCall(Long projectId, Long connectionId, String artifact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/retrieve".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (artifact != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "artifact", artifact));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call triggerRetrievingDataForConnectionValidateBeforeCall(Long projectId, Long connectionId, String artifact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling triggerRetrievingDataForConnection(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling triggerRetrievingDataForConnection(Async)");
        }
        
        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling triggerRetrievingDataForConnection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = triggerRetrievingDataForConnectionCall(projectId, connectionId, artifact, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Trigger data retrieval from an integrated Jira system
     * Trigger data retrieval from an integrated Jira system  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values include: &lt;b&gt;Defects, Requirements, Releases&lt;/b&gt; (required)
     * @return QueueProcessingResponseFetchDataVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseFetchDataVM triggerRetrievingDataForConnection(Long projectId, Long connectionId, String artifact) throws ApiException {
        ApiResponse<QueueProcessingResponseFetchDataVM> resp = triggerRetrievingDataForConnectionWithHttpInfo(projectId, connectionId, artifact);
        return resp.getData();
    }

    /**
     * Trigger data retrieval from an integrated Jira system
     * Trigger data retrieval from an integrated Jira system  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values include: &lt;b&gt;Defects, Requirements, Releases&lt;/b&gt; (required)
     * @return ApiResponse&lt;QueueProcessingResponseFetchDataVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseFetchDataVM> triggerRetrievingDataForConnectionWithHttpInfo(Long projectId, Long connectionId, String artifact) throws ApiException {
        com.squareup.okhttp.Call call = triggerRetrievingDataForConnectionValidateBeforeCall(projectId, connectionId, artifact, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseFetchDataVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger data retrieval from an integrated Jira system (asynchronously)
     * Trigger data retrieval from an integrated Jira system  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param artifact Valid values include: &lt;b&gt;Defects, Requirements, Releases&lt;/b&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call triggerRetrievingDataForConnectionAsync(Long projectId, Long connectionId, String artifact, final ApiCallback<QueueProcessingResponseFetchDataVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = triggerRetrievingDataForConnectionValidateBeforeCall(projectId, connectionId, artifact, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseFetchDataVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for triggerRetrievingDefectDataForConnection */
    private com.squareup.okhttp.Call triggerRetrievingDefectDataForConnectionCall(Long projectId, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/jira-integration/defect/retrieve".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call triggerRetrievingDefectDataForConnectionValidateBeforeCall(Long projectId, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling triggerRetrievingDefectDataForConnection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling triggerRetrievingDefectDataForConnection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = triggerRetrievingDefectDataForConnectionCall(projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Trigger defect retrieval from an integrated Jira system
     * 
     * @param projectId ID of the project (required)
     * @param body PID of Jira defects (required)
     * @return QueueProcessingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponse triggerRetrievingDefectDataForConnection(Long projectId, List<String> body) throws ApiException {
        ApiResponse<QueueProcessingResponse> resp = triggerRetrievingDefectDataForConnectionWithHttpInfo(projectId, body);
        return resp.getData();
    }

    /**
     * Trigger defect retrieval from an integrated Jira system
     * 
     * @param projectId ID of the project (required)
     * @param body PID of Jira defects (required)
     * @return ApiResponse&lt;QueueProcessingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponse> triggerRetrievingDefectDataForConnectionWithHttpInfo(Long projectId, List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = triggerRetrievingDefectDataForConnectionValidateBeforeCall(projectId, body, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger defect retrieval from an integrated Jira system (asynchronously)
     * 
     * @param projectId ID of the project (required)
     * @param body PID of Jira defects (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call triggerRetrievingDefectDataForConnectionAsync(Long projectId, List<String> body, final ApiCallback<QueueProcessingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = triggerRetrievingDefectDataForConnectionValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDefectMapping */
    private com.squareup.okhttp.Call updateDefectMappingCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationAutoFillMappingVM body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalProjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalProjectId", externalProjectId));
        if (externalIssueTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalIssueTypeId", externalIssueTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDefectMappingValidateBeforeCall(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationAutoFillMappingVM body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateDefectMapping(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling updateDefectMapping(Async)");
        }
        
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling updateDefectMapping(Async)");
        }
        
        // verify the required parameter 'externalIssueTypeId' is set
        if (externalIssueTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalIssueTypeId' when calling updateDefectMapping(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDefectMapping(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateDefectMappingCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a defect mapping of Jira connection
     * Update a defect mapping of Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of the Jira issue type   externalProjectId and externalIssueTypeId are used to identify a defect mapping and cannot be modified (required)
     * @param body &lt;em&gt;sendAttachmentToJira:&lt;/em&gt; send test log and test step log attachments to linked Jira Defects. Valid values include: &lt;b&gt;True, False&lt;/b&gt;  &lt;em&gt;configures:&lt;/em&gt; Auto filling configuration for Defect submission to Jira. This is an array of JSON objects each of which consists of a Jira field Id (&lt;em&gt;externalFieldId&lt;/em&gt;) and qTest fields (&lt;em&gt;qTestFieldIds&lt;/em&gt;) to be auto filled to the Jira field&lt;ul&gt;&lt;li&gt;You can only config auto fill for Jira text typed fields&lt;/li&gt;&lt;li&gt;You can auto fill multiple qTest fields to one Jira fields. Use &lt;strong&gt;comma without a following space&lt;/strong&gt; to separate the fields&lt;/li&gt;&lt;li&gt;These following qTest fields can be configured to be auto filled to Jira fields (use these field names exactly as mentioned below instead of their IDs in qTestFieldIds): &lt;em&gt;Assigned To, Description, Environment, Execution Type, Planned End, Planned Start, Submitter, Target Release/Build, Test Case Version, Test Data Source, Name, Precondition, Test Case Description, Session URL, Session Description, Session Environment, Test Run URL&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt; (required)
     * @return IntegrationAutoFillMappingVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationAutoFillMappingVM updateDefectMapping(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationAutoFillMappingVM body) throws ApiException {
        ApiResponse<IntegrationAutoFillMappingVM> resp = updateDefectMappingWithHttpInfo(projectId, connectionId, externalProjectId, externalIssueTypeId, body);
        return resp.getData();
    }

    /**
     * Update a defect mapping of Jira connection
     * Update a defect mapping of Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of the Jira issue type   externalProjectId and externalIssueTypeId are used to identify a defect mapping and cannot be modified (required)
     * @param body &lt;em&gt;sendAttachmentToJira:&lt;/em&gt; send test log and test step log attachments to linked Jira Defects. Valid values include: &lt;b&gt;True, False&lt;/b&gt;  &lt;em&gt;configures:&lt;/em&gt; Auto filling configuration for Defect submission to Jira. This is an array of JSON objects each of which consists of a Jira field Id (&lt;em&gt;externalFieldId&lt;/em&gt;) and qTest fields (&lt;em&gt;qTestFieldIds&lt;/em&gt;) to be auto filled to the Jira field&lt;ul&gt;&lt;li&gt;You can only config auto fill for Jira text typed fields&lt;/li&gt;&lt;li&gt;You can auto fill multiple qTest fields to one Jira fields. Use &lt;strong&gt;comma without a following space&lt;/strong&gt; to separate the fields&lt;/li&gt;&lt;li&gt;These following qTest fields can be configured to be auto filled to Jira fields (use these field names exactly as mentioned below instead of their IDs in qTestFieldIds): &lt;em&gt;Assigned To, Description, Environment, Execution Type, Planned End, Planned Start, Submitter, Target Release/Build, Test Case Version, Test Data Source, Name, Precondition, Test Case Description, Session URL, Session Description, Session Environment, Test Run URL&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt; (required)
     * @return ApiResponse&lt;IntegrationAutoFillMappingVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationAutoFillMappingVM> updateDefectMappingWithHttpInfo(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationAutoFillMappingVM body) throws ApiException {
        com.squareup.okhttp.Call call = updateDefectMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a defect mapping of Jira connection (asynchronously)
     * Update a defect mapping of Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param externalProjectId ID of a Jira project (required)
     * @param externalIssueTypeId ID of the Jira issue type   externalProjectId and externalIssueTypeId are used to identify a defect mapping and cannot be modified (required)
     * @param body &lt;em&gt;sendAttachmentToJira:&lt;/em&gt; send test log and test step log attachments to linked Jira Defects. Valid values include: &lt;b&gt;True, False&lt;/b&gt;  &lt;em&gt;configures:&lt;/em&gt; Auto filling configuration for Defect submission to Jira. This is an array of JSON objects each of which consists of a Jira field Id (&lt;em&gt;externalFieldId&lt;/em&gt;) and qTest fields (&lt;em&gt;qTestFieldIds&lt;/em&gt;) to be auto filled to the Jira field&lt;ul&gt;&lt;li&gt;You can only config auto fill for Jira text typed fields&lt;/li&gt;&lt;li&gt;You can auto fill multiple qTest fields to one Jira fields. Use &lt;strong&gt;comma without a following space&lt;/strong&gt; to separate the fields&lt;/li&gt;&lt;li&gt;These following qTest fields can be configured to be auto filled to Jira fields (use these field names exactly as mentioned below instead of their IDs in qTestFieldIds): &lt;em&gt;Assigned To, Description, Environment, Execution Type, Planned End, Planned Start, Submitter, Target Release/Build, Test Case Version, Test Data Source, Name, Precondition, Test Case Description, Session URL, Session Description, Session Environment, Test Run URL&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDefectMappingAsync(Long projectId, Long connectionId, String externalProjectId, String externalIssueTypeId, IntegrationAutoFillMappingVM body, final ApiCallback<IntegrationAutoFillMappingVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDefectMappingValidateBeforeCall(projectId, connectionId, externalProjectId, externalIssueTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationAutoFillMappingVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateIntegrationConnectionStatus */
    private com.squareup.okhttp.Call updateIntegrationConnectionStatusCall(Long projectId, Long connectionId, String active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
        .replaceAll("\\{" + "connectionId" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "active", active));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };

        if (!localVarHeaderParams.containsKey("Content-Type")) {
            final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIntegrationConnectionStatusValidateBeforeCall(Long projectId, Long connectionId, String active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateIntegrationConnectionStatus(Async)");
        }
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling updateIntegrationConnectionStatus(Async)");
        }
        
        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling updateIntegrationConnectionStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateIntegrationConnectionStatusCall(projectId, connectionId, active, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Activate or deactivate a Jira connection
     * Activate or deactivate a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to activate a connection, or &lt;em&gt;false&lt;/em&gt; to deactivate it (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateIntegrationConnectionStatus(Long projectId, Long connectionId, String active) throws ApiException {
        updateIntegrationConnectionStatusWithHttpInfo(projectId, connectionId, active);
    }

    /**
     * Activate or deactivate a Jira connection
     * Activate or deactivate a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to activate a connection, or &lt;em&gt;false&lt;/em&gt; to deactivate it (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateIntegrationConnectionStatusWithHttpInfo(Long projectId, Long connectionId, String active) throws ApiException {
        com.squareup.okhttp.Call call = updateIntegrationConnectionStatusValidateBeforeCall(projectId, connectionId, active, null, null);
        return apiClient.execute(call);
    }

    /**
     * Activate or deactivate a Jira connection (asynchronously)
     * Activate or deactivate a Jira connection  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.7+
     * @param projectId ID of the project (required)
     * @param connectionId ID of the Jira connection (required)
     * @param active Input &lt;em&gt;true&lt;/em&gt; to activate a connection, or &lt;em&gt;false&lt;/em&gt; to deactivate it (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIntegrationConnectionStatusAsync(Long projectId, Long connectionId, String active, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIntegrationConnectionStatusValidateBeforeCall(projectId, connectionId, active, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
